"use strict";(self.webpackChunksupastash_docs=self.webpackChunksupastash_docs||[]).push([[7770],{298:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Getting Started","href":"/supastash/docs/getting-started","docId":"getting-started","unlisted":false},{"type":"category","label":"Query Builder","items":[{"type":"link","label":"Supastash Query Builder","href":"/supastash/docs/supastash-query-builder","docId":"supastash-query-builder","unlisted":false},{"type":"link","label":"Run executions","href":"/supastash/docs/run-executions","docId":"run-executions","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"CRUD Methods","items":[{"type":"link","label":".insert() method","href":"/supastash/docs/insert-query","docId":"insert-query","unlisted":false},{"type":"link","label":".select() method","href":"/supastash/docs/select-query","docId":"select-query","unlisted":false},{"type":"link","label":".update() method","href":"/supastash/docs/update-query","docId":"update-query","unlisted":false},{"type":"link","label":".delete() method","href":"/supastash/docs/delete-query","docId":"delete-query","unlisted":false},{"type":"link","label":".upsert() method","href":"/supastash/docs/upsert-query","docId":"upsert-query","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Database Management","items":[{"type":"link","label":"schema-management","href":"/supastash/docs/schema-management","docId":"schema-management","unlisted":false},{"type":"link","label":"Destructive Operations","href":"/supastash/docs/destructives","docId":"destructives","unlisted":false},{"type":"link","label":"\ud83d\udcda Sync Log Utilities","href":"/supastash/docs/sync-log-utils","docId":"sync-log-utils","unlisted":false},{"type":"link","label":"\ud83d\udd04 Manual Refresh","href":"/supastash/docs/manual-refreshes","docId":"manual-refreshes","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"useSupastash","href":"/supastash/docs/useSupastash-hook","docId":"useSupastash-hook","unlisted":false},{"type":"link","label":"useSupastashData","href":"/supastash/docs/useSupastashData","docId":"useSupastashData","unlisted":false},{"type":"link","label":"useSupastashSyncStatus","href":"/supastash/docs/useSupastashSyncStatus","docId":"useSupastashSyncStatus","unlisted":false},{"type":"link","label":"Zustand integration","href":"/supastash/docs/zustand","docId":"zustand","unlisted":false},{"type":"link","label":"Configuration","href":"/supastash/docs/configuration","docId":"configuration","unlisted":false},{"type":"link","label":"Sync Flows","href":"/supastash/docs/sync-flows","docId":"sync-flows","unlisted":false}]},"docs":{"configuration":{"id":"configuration","title":"Supastash Configuration","description":"The configureSupastash() function sets up Supastash and must be called once at app startup","sidebar":"tutorialSidebar"},"delete-query":{"id":"delete-query","title":".delete() method","description":"The .delete() method in Supastash performs soft deletes by default \u2014 meaning it sets a deleted_at timestamp on the affected rows. This keeps the data in the local DB while marking it as deleted for sync and UI purposes. Once synced, row will then be deleted.","sidebar":"tutorialSidebar"},"destructives":{"id":"destructives","title":"Destructive Operations","description":"These functions clear only the local SQLite data \u2014 your Supabase cloud data remains safe and untouched.","sidebar":"tutorialSidebar"},"getting-started":{"id":"getting-started","title":"\ud83d\ude80 Getting Started with Supastash","description":"Supastash helps you build offline-first apps by syncing local SQLite with Supabase \u2014 all in the background.","sidebar":"tutorialSidebar"},"insert-query":{"id":"insert-query","title":".insert() method","description":"The .insert() method in Supastash lets you add new rows to your local SQLite table. It follows the Supabase pattern, but with offline-first logic built in \u2014 handling inserts locally first, then syncing to Supabase when possible.","sidebar":"tutorialSidebar"},"manual-refreshes":{"id":"manual-refreshes","title":"\ud83d\udd04 Manual Refresh","description":"Need to manually trigger a refresh? Use these from:","sidebar":"tutorialSidebar"},"run-executions":{"id":"run-executions","title":"Run executions","description":"Supastash queries must be finalized with .execute(), .run(), or .go() \u2014 all of which trigger the actual operation after your query is fully constructed.","sidebar":"tutorialSidebar"},"schema-management":{"id":"schema-management","title":"schema-management","description":"\ud83e\uddf1 defineLocalSchema(...)","sidebar":"tutorialSidebar"},"select-query":{"id":"select-query","title":".select() method","description":"The .select() method in Supastash fetches rows from your local SQLite table. It works like Supabase \u2014 with filters, limits, and column selection \u2014 but all with offline-first handling under the hood.","sidebar":"tutorialSidebar"},"supastash-query-builder":{"id":"supastash-query-builder","title":"Supastash Query Builder","description":"Supastash provides a powerful, chainable query builder designed for local-first CRUD operations in SQLite with optional Supabase sync. Inspired by Supabase\u2019s API, it mimics the same method chaining you\u2019re already familiar with \u2014 making it intuitive to adopt.","sidebar":"tutorialSidebar"},"sync-flows":{"id":"sync-flows","title":"Sync","description":"---","sidebar":"tutorialSidebar"},"sync-log-utils":{"id":"sync-log-utils","title":"\ud83d\udcda Sync Log Utilities","description":"Supastash tracks createdat, updatedat, and deleted_at checkpoints per table and per filter key.","sidebar":"tutorialSidebar"},"sync-status-manager":{"id":"sync-status-manager","title":"\u26a0\ufe0f Deprecated \u2014 Local Sync & Delete Log Utilities","description":"Status: Deprecated in newer releases"},"update-query":{"id":"update-query","title":".update() method","description":"The .update() method in Supastash lets you modify existing rows in a local SQLite table \u2014 with optional sync to Supabase. It mirrors the familiar Supabase API but layers in offline-first behavior and sync logic.","sidebar":"tutorialSidebar"},"upsert-query":{"id":"upsert-query","title":".upsert() method","description":"The .upsert() method in Supastash is a local-first merge operation that inserts or updates rows based on their id. If a row with the given id exists, it is updated; if not, a new one is inserted.","sidebar":"tutorialSidebar"},"useSupastash-hook":{"id":"useSupastash-hook","title":"Initializing Supastash","description":"\ud83e\udde9 useSupastash","sidebar":"tutorialSidebar"},"useSupastashData":{"id":"useSupastashData","title":"\ud83d\udce6 useSupastashData","description":"The useSupastashData hook is the core way to access and sync data in Supastash.","sidebar":"tutorialSidebar"},"useSupastashFilters":{"id":"useSupastashFilters","title":"useSupastashFilters","description":"\ud83d\udee1\ufe0f useSupastashFilters"},"useSupastashLiteQuery":{"id":"useSupastashLiteQuery","title":"useSupastashLiteQuery","description":"\ud83e\udde9 useSupastashLiteQuery (\u26a0\ufe0f NOT READY FOR RELEASE)"},"useSupastashSyncStatus":{"id":"useSupastashSyncStatus","title":"\ud83e\udded useSupastashSyncStatus","description":"useSupastashSyncStatus(debounceMs?) gives you live visibility into Supastash\'s sync process \u2014 both push (local \u2192 server) and pull (server \u2192 local).","sidebar":"tutorialSidebar"},"zustand":{"id":"zustand","title":"zustand","description":"\ud83d\udd01 Zustand Store Auto-Hydration via Supastash Events","sidebar":"tutorialSidebar"}}}}')}}]);