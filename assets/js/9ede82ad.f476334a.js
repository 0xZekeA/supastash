"use strict";(self.webpackChunksupastash_docs=self.webpackChunksupastash_docs||[]).push([[3953],{3812:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>o,frontMatter:()=>r,metadata:()=>l,toc:()=>a});const l=JSON.parse('{"id":"schema-management","title":"Schema Management","description":"\ud83e\uddf1 defineLocalSchema(...)","source":"@site/docs/schema-management.md","sourceDirName":".","slug":"/schema-management","permalink":"/supastash/docs/schema-management","draft":false,"unlisted":false,"editUrl":"https://github.com/0xZekeA/supastash/tree/main/docs-site/docs/schema-management.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":".upsert() method","permalink":"/supastash/docs/upsert-query"},"next":{"title":"Destructive Operations","permalink":"/supastash/docs/destructives"}}');var t=n(4848),i=n(8453);const r={},d="Schema Management",c={},a=[{value:"\ud83e\uddf1 <code>defineLocalSchema(...)</code>",id:"-definelocalschema",level:2},{value:"\u26a0\ufe0f Important Notes",id:"\ufe0f-important-notes",level:3},{value:"\ud83e\uddea Example",id:"-example",level:3},{value:"\ud83d\udd27 Parameters",id:"-parameters",level:3},{value:"\ud83e\uddf1 Required Columns",id:"-required-columns",level:3},{value:"\ud83d\udca1 Column Type Support",id:"-column-type-support",level:3},{value:"\ud83e\uddfc Resetting a Table",id:"-resetting-a-table",level:3},{value:"\ud83d\udcda Related",id:"-related",level:3},{value:"\ud83d\udd0c <code>getSupastashDb()</code>",id:"-getsupastashdb",level:2},{value:"\ud83d\udcc4 Description",id:"-description",level:3},{value:"\ud83e\udde0 How It Works",id:"-how-it-works",level:3},{value:"\u2705 Supported Client Types",id:"-supported-client-types",level:3},{value:"\ud83d\udd27 API Methods",id:"-api-methods",level:3},{value:"\ud83d\udce6 Example Usage",id:"-example-usage",level:3},{value:"\u26a0\ufe0f Notes",id:"\ufe0f-notes",level:3},{value:"\ud83d\udccb <code>getAllTables(): Promise&lt;string[] | null&gt;</code>",id:"-getalltables-promisestring--null",level:3},{value:"\u2705 Example",id:"-example-1",level:4},{value:"\ud83d\udccc Use Cases",id:"-use-cases",level:4},{value:"\ud83d\udd01 Return",id:"-return",level:4},{value:"\ud83d\udd17 What\u2019s Next?",id:"-whats-next",level:3}];function h(e){const s={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"schema-management",children:"Schema Management"})}),"\n",(0,t.jsxs)(s.h2,{id:"-definelocalschema",children:["\ud83e\uddf1 ",(0,t.jsx)(s.code,{children:"defineLocalSchema(...)"})]}),"\n",(0,t.jsx)(s.p,{children:"Manually defines the schema for a local SQLite table used by Supastash."}),"\n",(0,t.jsx)(s.p,{children:"This is helpful for:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Explicitly controlling column types and constraints."}),"\n",(0,t.jsxs)(s.li,{children:["Ensuring default values and modifiers (e.g., ",(0,t.jsx)(s.code,{children:"NOT NULL"}),", ",(0,t.jsx)(s.code,{children:"DEFAULT CURRENT_TIMESTAMP"}),") are present."]}),"\n",(0,t.jsxs)(s.li,{children:["Pre-defining tables before ",(0,t.jsx)(s.code,{children:"useSupastashData(...)"})," is called."]}),"\n",(0,t.jsxs)(s.li,{children:["Will not replace previously created tables unless it's called with the ",(0,t.jsx)(s.code,{children:"deletePreviousSchema"})," argument."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"\ufe0f-important-notes",children:"\u26a0\ufe0f Important Notes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"useSupastashData(...)"})," automatically ",(0,t.jsx)(s.strong,{children:"creates local tables"})," based on the remote schema fetched via the ",(0,t.jsx)(s.a,{href:"./getting-started#3-enable-rls-support-server-side-setup",children:(0,t.jsx)(s.code,{children:"get_table_schema"})})," RPC.\nBut there are a few things to keep in mind:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["It does ",(0,t.jsx)(s.strong,{children:"not"})," include default values or constraints."]}),"\n",(0,t.jsxs)(s.li,{children:["It does ",(0,t.jsx)(s.strong,{children:"not"})," include modifiers like ",(0,t.jsx)(s.code,{children:"UNIQUE"}),", ",(0,t.jsx)(s.code,{children:"DEFAULT"}),", or ",(0,t.jsx)(s.code,{children:"PRIMARY KEY"}),"."]}),"\n",(0,t.jsx)(s.li,{children:"It only ensures the structure exists enough to read/write data."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["If your local table needs strict constraints, timestamps, or default values \u2014 ",(0,t.jsxs)(s.strong,{children:["use ",(0,t.jsx)(s.code,{children:"defineLocalSchema(...)"})," manually instead."]})]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-example",children:"\ud83e\uddea Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'import { defineLocalSchema } from "supastash";\n\nawait defineLocalSchema(\n  "users",\n  {\n    id: "TEXT PRIMARY KEY",\n    full_name: "TEXT NOT NULL",\n    email: "TEXT UNIQUE NOT NULL",\n    created_by: "TEXT",\n  },\n  true\n); // Pass `true` if you want to force re-creation\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-parameters",children:"\ud83d\udd27 Parameters"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Name"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Required"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"tableName"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"string"})}),(0,t.jsx)(s.td,{children:"\u2705"}),(0,t.jsx)(s.td,{children:"The name of the table to create."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"schema"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Record<string, ColumnDefinition>"})}),(0,t.jsx)(s.td,{children:"\u2705"}),(0,t.jsx)(s.td,{children:"The column definitions (see below)."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"deletePreviousSchema"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"boolean"})," (default: ",(0,t.jsx)(s.code,{children:"false"}),")"]}),(0,t.jsx)(s.td,{children:"\u274c"}),(0,t.jsxs)(s.td,{children:["If ",(0,t.jsx)(s.code,{children:"true"}),", drops any existing table and Supastash sync state for that table."]})]})]})]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["\u26a0\ufe0f ",(0,t.jsxs)(s.strong,{children:["Avoid using ",(0,t.jsx)(s.code,{children:"deletePreviousSchema = true"})," in production."]}),"\nThis option ",(0,t.jsx)(s.strong,{children:"wipes all local data"})," for the table \u2014 only use it when resetting development state or during controlled migrations."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-required-columns",children:"\ud83e\uddf1 Required Columns"}),"\n",(0,t.jsxs)(s.p,{children:["Regardless of what you pass in ",(0,t.jsx)(s.code,{children:"schema"}),", Supastash will ",(0,t.jsx)(s.strong,{children:"automatically"})," include these columns:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'{\n  created_at: "TEXT NOT NULL",\n  updated_at: "TEXT NOT NULL",\n  synced_at: "TEXT DEFAULT NULL",\n  deleted_at: "TEXT DEFAULT NULL",\n}\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Your schema ",(0,t.jsx)(s.strong,{children:"must include"})," an ",(0,t.jsx)(s.code,{children:"id"})," column (UUID format as ",(0,t.jsx)(s.code,{children:"TEXT"}),"). If omitted, the function will throw an error."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-column-type-support",children:"\ud83d\udca1 Column Type Support"}),"\n",(0,t.jsx)(s.p,{children:"Columns are defined using string templates based on SQL types and modifiers. Examples:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'{\n  id: "TEXT PRIMARY KEY",\n  quantity: "INTEGER NOT NULL",\n  price: "REAL",\n  active: "INTEGER DEFAULT 1",\n  created_at: "TEXT DEFAULT CURRENT_TIMESTAMP"\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:"You can combine multiple modifiers like so:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'"name": "TEXT NOT NULL UNIQUE"\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-resetting-a-table",children:"\ud83e\uddfc Resetting a Table"}),"\n",(0,t.jsx)(s.p,{children:"To reset the schema (e.g., in development):"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'await defineLocalSchema("users", schema, true);\n'})}),"\n",(0,t.jsx)(s.p,{children:"This drops the table, clears sync metadata, and re-creates the table with the new schema."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-related",children:"\ud83d\udcda Related"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.code,{children:"useSupastashData(...)"}),": Automatically creates missing tables, but with no constraints or default values."]}),"\n",(0,t.jsxs)(s.li,{children:["\u274c Does ",(0,t.jsx)(s.em,{children:"not"})," apply default constraints like ",(0,t.jsx)(s.code,{children:"NOT NULL"}),", ",(0,t.jsx)(s.code,{children:"UNIQUE"}),", or ",(0,t.jsx)(s.code,{children:"DEFAULT"})," \u2014 use ",(0,t.jsx)(s.code,{children:"defineLocalSchema(...)"})," for those."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsxs)(s.h2,{id:"-getsupastashdb",children:["\ud83d\udd0c ",(0,t.jsx)(s.code,{children:"getSupastashDb()"})]}),"\n",(0,t.jsx)(s.h3,{id:"-description",children:"\ud83d\udcc4 Description"}),"\n",(0,t.jsx)(s.p,{children:"Returns the active SQLite database used by Supastash for local reads, writes, and sync tracking."}),"\n",(0,t.jsx)(s.p,{children:"The connection is created only once and reused \u2014 based on the adapter you set in your config."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-how-it-works",children:"\ud83e\udde0 How It Works"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Retrieves your Supastash config"})," using ",(0,t.jsx)(s.code,{children:"getSupastashConfig()"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Checks for presence"})," of both:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sqliteClient"}),": The raw SQLite client you've passed during setup."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sqliteClientType"}),": A string that tells Supastash which adapter to use (",(0,t.jsx)(s.code,{children:"expo"}),", ",(0,t.jsx)(s.code,{children:"rn-nitro"}),", ",(0,t.jsx)(s.code,{children:"rn-storage"}),")."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"If the database instance hasn't been initialized yet:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Calls that adapter\u2019s ",(0,t.jsx)(s.code,{children:"openDatabaseAsync(...)"})," method with the configured DB name and client."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Caches the result in a ",(0,t.jsx)(s.code,{children:"db"})," variable so future calls don\u2019t re-open the database."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-supported-client-types",children:"\u2705 Supported Client Types"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Client Type"}),(0,t.jsx)(s.th,{children:"Adapter Used"}),(0,t.jsx)(s.th,{children:"Compatible With"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:'"expo"'})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"SQLiteAdapterExpo"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"expo-sqlite"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:'"rn-storage"'})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"SQLiteAdapterStorage"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"react-native-sqlite-storage"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:'"rn-nitro"'})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"SQLiteAdapterNitro"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"react-native-quick-sqlite"})})]})]})]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-api-methods",children:"\ud83d\udd27 API Methods"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Method"}),(0,t.jsx)(s.th,{children:"Description"}),(0,t.jsx)(s.th,{children:"Returns"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"runAsync(sql, params?)"})}),(0,t.jsxs)(s.td,{children:["Executes a single statement (e.g., ",(0,t.jsx)(s.code,{children:"INSERT"}),", ",(0,t.jsx)(s.code,{children:"UPDATE"}),", ",(0,t.jsx)(s.code,{children:"DELETE"}),")"]}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Promise<void>"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"getAllAsync(sql, params?)"})}),(0,t.jsxs)(s.td,{children:["Fetches ",(0,t.jsx)(s.strong,{children:"all rows"})," from a ",(0,t.jsx)(s.code,{children:"SELECT"})," query"]}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Promise<any[]>"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"getFirstAsync(sql, params?)"})}),(0,t.jsxs)(s.td,{children:["Fetches ",(0,t.jsx)(s.strong,{children:"first row only"})," (or ",(0,t.jsx)(s.code,{children:"null"})," if none) from a ",(0,t.jsx)(s.code,{children:"SELECT"})," query"]}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Promise<any | null>"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"execAsync(statements)"})}),(0,t.jsxs)(s.td,{children:["Executes multiple SQL statements separated by ",(0,t.jsx)(s.code,{children:";"})," (used in schema creation)"]}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Promise<void>"})})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["Follows the same call patterns as ",(0,t.jsx)(s.code,{children:"expo-sqlite"}),", making it familiar and easy to use."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-example-usage",children:"\ud83d\udce6 Example Usage"}),"\n",(0,t.jsxs)(s.p,{children:["This function is used ",(0,t.jsx)(s.strong,{children:"internally"})," by other Supastash functions (e.g., ",(0,t.jsx)(s.code,{children:"defineLocalSchema"}),", query runners, sync processors) but can also be called manually if you need raw access to the database:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'const db = await getSupastashDb();\nconst users = await db.getAllAsync("SELECT * FROM users");\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"\ufe0f-notes",children:"\u26a0\ufe0f Notes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["If ",(0,t.jsx)(s.code,{children:"configureSupastash(...)"})," hasn't been called before this, the config will be empty and this function will throw."]}),"\n",(0,t.jsx)(s.li,{children:"This method assumes the client and clientType are correctly configured; if not, an error will be thrown."}),"\n",(0,t.jsxs)(s.li,{children:["This is designed to be ",(0,t.jsx)(s.strong,{children:"adapter-agnostic"}),", so it supports multiple SQLite engines while exposing a unified interface."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsxs)(s.h3,{id:"-getalltables-promisestring--null",children:["\ud83d\udccb ",(0,t.jsx)(s.code,{children:"getAllTables(): Promise<string[] | null>"})]}),"\n",(0,t.jsxs)(s.p,{children:["Returns a list of all user-defined tables in the local SQLite database, ",(0,t.jsx)(s.strong,{children:"excluding"})," internal tables used by Supastash."]}),"\n",(0,t.jsx)(s.h4,{id:"-example-1",children:"\u2705 Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'const tables = await getAllTables();\nconsole.log(tables);\n// ["users", "orders", "transactions"]\n'})}),"\n",(0,t.jsx)(s.h4,{id:"-use-cases",children:"\ud83d\udccc Use Cases"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Listing all tables available for syncing or inspection."}),"\n",(0,t.jsx)(s.li,{children:"Dynamic tooling (e.g., admin panels, migration utilities)."}),"\n",(0,t.jsx)(s.li,{children:"Debugging which user tables are present in the local DB."}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"-return",children:"\ud83d\udd01 Return"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"string[]"})," \u2013 array of table names (excluding system/internal)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"null"})," \u2013 if no user tables are found."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"-whats-next",children:"\ud83d\udd17 What\u2019s Next?"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/supastash/docs/data-access",children:"Data Access docs"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/supastash/docs/useSupastash-hook",children:"useSupastash docs"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/supastash/docs/supastash-query-builder",children:"Query Builder docs"})}),"\n"]})]})}function o(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>d});var l=n(6540);const t={},i=l.createContext(t);function r(e){const s=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),l.createElement(i.Provider,{value:s},e.children)}}}]);