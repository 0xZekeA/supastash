"use strict";(self.webpackChunksupastash_docs=self.webpackChunksupastash_docs||[]).push([[2330],{4451:(e,s,d)=>{d.r(s),d.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"useSupastashData","title":"\ud83d\udce6 useSupastashData","description":"The useSupastashData hook is the core way to access and sync data in Supastash.","source":"@site/docs/useSupastashData.md","sourceDirName":".","slug":"/useSupastashData","permalink":"/supastash/docs/useSupastashData","draft":false,"unlisted":false,"editUrl":"https://github.com/0xZekeA/supastash/tree/main/docs-site/docs/useSupastashData.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"useSupastash","permalink":"/supastash/docs/useSupastash-hook"},"next":{"title":"Zustand integration","permalink":"/supastash/docs/zustand"}}');var r=d(4848),t=d(8453);const l={},i="\ud83d\udce6 useSupastashData",c={},a=[{value:"\ud83e\udde0 What It Does",id:"-what-it-does",level:2},{value:"\u2705 Key Features",id:"-key-features",level:2},{value:"\ud83e\uddea Basic Usage",id:"-basic-usage",level:2},{value:"\ud83d\udd0d With Filters, Lazy Load, and Callbacks",id:"-with-filters-lazy-load-and-callbacks",level:2},{value:"\ud83d\udce6 Return Values",id:"-return-values",level:2},{value:"\u2699\ufe0f Hook Options",id:"\ufe0f-hook-options",level:2},{value:"<code>extraMapKeys</code> \u2013 Fast Lookups &amp; Grouping Built-In",id:"extramapkeys--fast-lookups--grouping-built-in",level:3},{value:"What It Does",id:"what-it-does",level:3},{value:"Why It Matters",id:"why-it-matters",level:3},{value:"Example",id:"example",level:3},{value:"\ud83d\udd01 Advanced Callbacks",id:"-advanced-callbacks",level:2},{value:"<code>onInsertAndUpdate</code>",id:"oninsertandupdate",level:3},{value:"<code>onPushToRemote</code>",id:"onpushtoremote",level:3},{value:"\ud83d\udd17 What\u2019s Next",id:"-whats-next",level:2}];function o(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsxs)(s.h1,{id:"-usesupastashdata",children:["\ud83d\udce6 ",(0,r.jsx)(s.code,{children:"useSupastashData"})]})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"useSupastashData"})," hook is the ",(0,r.jsx)(s.strong,{children:"core way"})," to access and sync data in Supastash.\nIt handles ",(0,r.jsx)(s.strong,{children:"offline-first fetching"}),", ",(0,r.jsx)(s.strong,{children:"real-time updates"}),", ",(0,r.jsx)(s.strong,{children:"manual refreshes"}),", and ",(0,r.jsx)(s.strong,{children:"fine-grained event control"})," \u2014 all built on SQLite + Supabase."]}),"\n",(0,r.jsx)(s.p,{children:"This doc is your all-in-one guide to understanding how to use it properly."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-what-it-does",children:"\ud83e\udde0 What It Does"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"useSupastashData"})," is a React hook that:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Loads data instantly from your local SQLite table (even without internet)."}),"\n",(0,r.jsx)(s.li,{children:"Keeps that data in sync with Supabase \u2014 both ways."}),"\n",(0,r.jsxs)(s.li,{children:["Subscribes to Supabase realtime changes (",(0,r.jsx)(s.code,{children:"INSERT"}),", ",(0,r.jsx)(s.code,{children:"UPDATE"}),", ",(0,r.jsx)(s.code,{children:"DELETE"}),")."]}),"\n",(0,r.jsx)(s.li,{children:"Minimizes re-renders via smart batching + memoization."}),"\n",(0,r.jsx)(s.li,{children:"Supports filtering, grouping, lazy fetch, and custom callbacks."}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["It's made to be ",(0,r.jsx)(s.strong,{children:"plug-and-play"})," \u2014 but also powerful enough for edge cases."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-key-features",children:"\u2705 Key Features"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\ud83d\udd04 ",(0,r.jsx)(s.strong,{children:"Offline-first loading"})," from local database"]}),"\n",(0,r.jsxs)(s.li,{children:["\ud83d\udd0c ",(0,r.jsx)(s.strong,{children:"Realtime Supabase sync"})," (insert/update/delete)"]}),"\n",(0,r.jsxs)(s.li,{children:["\ud83e\udde0 ",(0,r.jsx)(s.strong,{children:"Memoized output"})," (no unnecessary renders)"]}),"\n",(0,r.jsxs)(s.li,{children:["\u23ef\ufe0f ",(0,r.jsx)(s.strong,{children:"Lazy mode"})," for manual control"]}),"\n",(0,r.jsxs)(s.li,{children:["\ud83d\udce4 ",(0,r.jsx)(s.strong,{children:"Custom callbacks"})," for push/pull sync events"]}),"\n",(0,r.jsxs)(s.li,{children:["\ud83d\udce6 ",(0,r.jsx)(s.strong,{children:"Batched updates"})," via ",(0,r.jsx)(s.code,{children:"flushIntervalMs"})]}),"\n",(0,r.jsxs)(s.li,{children:["\ud83d\udd0d ",(0,r.jsx)(s.strong,{children:"Filter-aware"})," both locally and remotely"]}),"\n",(0,r.jsxs)(s.li,{children:["\ud83e\udde9 ",(0,r.jsx)(s.strong,{children:"Grouping support"})," with ",(0,r.jsx)(s.code,{children:"extraMapKeys"})]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-basic-usage",children:"\ud83e\uddea Basic Usage"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",children:'const { data, dataMap } = useSupastashData<Order>("orders");\n'})}),"\n",(0,r.jsxs)(s.p,{children:["This loads ",(0,r.jsx)(s.code,{children:"orders"})," from your local SQLite database, keeps it synced, and returns two things:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"data"})," \u2013 An array of all rows"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"dataMap"})," \u2013 A map keyed by ",(0,r.jsx)(s.code,{children:"id"})]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-with-filters-lazy-load-and-callbacks",children:"\ud83d\udd0d With Filters, Lazy Load, and Callbacks"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",children:'const { data, dataMap, trigger, cancel, groupedBy } = useSupastashData<Order>(\n  "orders",\n  {\n    shouldFetch: !!userId, // Only fetch if user is available\n    lazy: true, // Wait for manual trigger\n    flushIntervalMs: 200, // Reduce render frequency\n    filter: {\n      column: "user_id",\n      operator: "eq",\n      value: userId,\n    },\n    extraMapKeys: ["status", "user_id"],\n    onInsert: (order) => console.log("Inserted:", order),\n    onUpdate: (order) => console.log("Updated:", order),\n    onDelete: (order) => console.log("Deleted:", order),\n  }\n);\n\nuseEffect(() => {\n  trigger(); // Only needed if lazy: true\n}, []);\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-return-values",children:"\ud83d\udce6 Return Values"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"data"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"R[]"})}),(0,r.jsx)(s.td,{children:"Array of rows from local table"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"dataMap"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Map<string, R>"})}),(0,r.jsxs)(s.td,{children:["Keyed map of rows by their ",(0,r.jsx)(s.code,{children:"id"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"groupedBy"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Record<string, Map<string, R[]>>"})}),(0,r.jsx)(s.td,{children:"Optional grouped maps by field (if specified)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"trigger"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"() => void"})}),(0,r.jsx)(s.td,{children:"Starts fetch + subscription (if lazy)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"cancel"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"() => void"})}),(0,r.jsx)(s.td,{children:"Stops sync and fetch (useful for cleanup)"})]})]})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"\ufe0f-hook-options",children:"\u2699\ufe0f Hook Options"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Option"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Default"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"shouldFetch"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"boolean"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"true"})}),(0,r.jsx)(s.td,{children:"Whether to automatically fetch local data on mount"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"lazy"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"boolean"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"false"})}),(0,r.jsxs)(s.td,{children:["If true, hook does nothing until you manually call ",(0,r.jsx)(s.code,{children:"trigger()"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"extraMapKeys"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string[]"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsxs)(s.td,{children:["Build secondary maps for grouping by additional keys (e.g., ",(0,r.jsx)(s.code,{children:"chat_id"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"filter"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"RealtimeFilter"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsx)(s.td,{children:"Filter applied only to Supabase realtime events"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"onlyUseFilterForRealtime"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"boolean"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"false"})}),(0,r.jsxs)(s.td,{children:["If true, ",(0,r.jsx)(s.code,{children:"filter"})," won\u2019t affect local query\u2014just realtime stream"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"sqlFilter"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"RealtimeFilter[]"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsx)(s.td,{children:"SQL-style filters applied to local and remote queries"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"flushIntervalMs"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"number"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"100"})}),(0,r.jsx)(s.td,{children:"Debounce interval for UI updates"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"realtime"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"boolean"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"true"})}),(0,r.jsxs)(s.td,{children:["Whether to subscribe to Supabase ",(0,r.jsx)(s.code,{children:"postgres_changes"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"limit"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"number"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"1000"})}),(0,r.jsx)(s.td,{children:"Max number of local records to load"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"daylength"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"number"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsxs)(s.td,{children:["Fetch only rows created within the last ",(0,r.jsx)(s.code,{children:"n"})," days"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"useFilterWhileSyncing"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"boolean"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"true"})}),(0,r.jsxs)(s.td,{children:["Apply ",(0,r.jsx)(s.code,{children:"filter"})," to remote sync as well"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"orderBy"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:'"created_at"'})}),(0,r.jsx)(s.td,{children:"Column to order results by"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"orderDesc"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"boolean"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"true"})}),(0,r.jsx)(s.td,{children:"Whether to sort in descending order"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"clearCacheOnMount"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"boolean"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"false"})}),(0,r.jsx)(s.td,{children:"Clears the shared cache for this table when the hook mounts"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"onInsert"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(item: any) => void"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsx)(s.td,{children:"Called when a record is inserted via Supabase"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"onUpdate"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(item: any) => void"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsx)(s.td,{children:"Called when a record is updated via Supabase"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"onDelete"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(item: any) => void"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsx)(s.td,{children:"Called when a record is deleted via Supabase"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"onInsertAndUpdate"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(item: any) => void"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsx)(s.td,{children:"Called for both insert and update events"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"onPushToRemote"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(items: any[]) => Promise<boolean>"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsxs)(s.td,{children:["Custom push logic for unsynced local records; return ",(0,r.jsx)(s.code,{children:"true"})," if successful"]})]})]})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h3,{id:"extramapkeys--fast-lookups--grouping-built-in",children:[(0,r.jsx)(s.code,{children:"extraMapKeys"})," \u2013 Fast Lookups & Grouping Built-In"]}),"\n",(0,r.jsxs)(s.p,{children:["When working with local data like ",(0,r.jsx)(s.code,{children:"orders"}),", it\u2019s common to filter or group by fields like ",(0,r.jsx)(s.code,{children:"user_id"})," or ",(0,r.jsx)(s.code,{children:"status"}),". Doing that with ",(0,r.jsx)(s.code,{children:".filter()"})," every time isn\u2019t just repetitive \u2014 it\u2019s inefficient, especially as your data grows."]}),"\n",(0,r.jsxs)(s.p,{children:["That\u2019s where ",(0,r.jsx)(s.code,{children:"extraMapKeys"})," in ",(0,r.jsx)(s.code,{children:"useSupatashData"})," comes in."]}),"\n",(0,r.jsx)(s.h3,{id:"what-it-does",children:"What It Does"}),"\n",(0,r.jsxs)(s.p,{children:["Pass one or more column names to ",(0,r.jsx)(s.code,{children:"extraMapKeys"}),", and Supastash will automatically generate lookup maps for them:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:'const { data, dataMap, groupedBy } = useSupatashData("orders", {\n  extraMapKeys: ["user_id", "status"],\n});\n'})}),"\n",(0,r.jsx)(s.p,{children:"Now you get:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:'dataMap.get("order_123")'})," \u2013 fast ID lookup"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:'groupedBy.user_id.get("user_42")'})," \u2013 all orders for a user"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:'groupedBy.status.get("pending")'})," \u2013 all pending orders"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"No extra filtering, no extra logic."}),"\n",(0,r.jsx)(s.h3,{id:"why-it-matters",children:"Why It Matters"}),"\n",(0,r.jsx)(s.p,{children:"It\u2019s like having indexed views of your local data \u2014 ready to use, already synced, and fast.\nThis is especially useful for rendering dashboards, grouped lists, or filtering data by key fields."}),"\n",(0,r.jsx)(s.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const userOrders = groupedBy.user_id.get(user.id) ?? [];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["One line. No ",(0,r.jsx)(s.code,{children:"filter()"}),". Faster and scalable."]}),"\n",(0,r.jsx)(s.p,{children:"Use it when you know you\u2019ll be accessing your data by specific fields often. It keeps your code cleaner and your UI snappier."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-advanced-callbacks",children:"\ud83d\udd01 Advanced Callbacks"}),"\n",(0,r.jsx)(s.h3,{id:"oninsertandupdate",children:(0,r.jsx)(s.code,{children:"onInsertAndUpdate"})}),"\n",(0,r.jsx)(s.p,{children:'This fires on both inserts and updates from Supabase. Perfect for logic like marking messages as "received":'}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:'onInsertAndUpdate: async (payload) => {\n  const { data: local } = await supastash\n    .from("messages")\n    .select("*")\n    .eq("id", payload.id)\n    .run();\n\n  if (!local || local.is_received) return;\n\n  await supastash\n    .from("messages")\n    .upsert({ ...local, is_received: true })\n    .run();\n};\n'})}),"\n",(0,r.jsx)(s.h3,{id:"onpushtoremote",children:(0,r.jsx)(s.code,{children:"onPushToRemote"})}),"\n",(0,r.jsx)(s.p,{children:"Customize how local records get pushed to Supabase:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:'onPushToRemote: async (payload) => {\n  const result = await supabase.from("messages").upsert(payload);\n  return !result.error;\n};\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Return ",(0,r.jsx)(s.code,{children:"true"})," on success \u2014 Supastash will retry otherwise."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-whats-next",children:"\ud83d\udd17 What\u2019s Next"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"/supastash/docs/configuration",children:"Configuration Guide"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"/supastash/docs/supastash-query-builder",children:"Query Builder Docs"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"/supastash/docs/useSupastash-hook",children:"Hook Reference"})}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.p,{children:["This hook is the ",(0,r.jsx)(s.strong,{children:"heart of Supastash"}),"."]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,s,d)=>{d.d(s,{R:()=>l,x:()=>i});var n=d(6540);const r={},t=n.createContext(r);function l(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);