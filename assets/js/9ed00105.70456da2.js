"use strict";(self.webpackChunksupastash_docs=self.webpackChunksupastash_docs||[]).push([[3873],{8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var l=s(6540);const r={},d=l.createContext(r);function i(e){const n=l.useContext(d);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),l.createElement(d.Provider,{value:n},e.children)}},8633:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"configuration","title":"Supastash Configuration","description":"The configureSupastash() function sets up Supastash and must be called once at app startup","source":"@site/docs/configuration.md","sourceDirName":".","slug":"/configuration","permalink":"/supastash/docs/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/0xZekeA/supastash/tree/main/docs-site/docs/configuration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Zustand integration","permalink":"/supastash/docs/zustand"},"next":{"title":"Sync Flows","permalink":"/supastash/docs/sync-flows"}}');var r=s(4848),d=s(8453);const i={},c="Supastash Configuration",t={},o=[{value:"Quick Start",id:"quick-start",level:2},{value:"What\u2019s New (at a glance)",id:"whats-new-at-a-glance",level:2},{value:"API",id:"api",level:2},{value:"<code>configureSupastash&lt;T&gt;(config)</code>",id:"configuresupastashtconfig",level:3},{value:"Core options",id:"core-options",level:4},{value:"Sync switches &amp; intervals",id:"sync-switches--intervals",level:4},{value:"Table selection",id:"table-selection",level:4},{value:"Conflict policy &amp; field enforcement",id:"conflict-policy--field-enforcement",level:4},{value:"Behavior &amp; Precedence (how merges work)",id:"behavior--precedence-how-merges-work",level:2},{value:"Conflict Policy (DEFAULT_POLICY)",id:"conflict-policy-default_policy",level:2},{value:"Field Enforcement (DEFAULT_FIELDS)",id:"field-enforcement-default_fields",level:2},{value:"SQLite Client Types",id:"sqlite-client-types",level:2},{value:"Recipes",id:"recipes",level:2},{value:"Enforce unique name (\u226420 chars) per shop; barcodes unique per shop",id:"enforce-unique-name-20-chars-per-shop-barcodes-unique-per-shop",level:3},{value:"Delete conflicted rows automatically",id:"delete-conflicted-rows-automatically",level:3},{value:"Override polling &amp; exclude tables",id:"override-polling--exclude-tables",level:3},{value:"Use Nitro SQLite",id:"use-nitro-sqlite",level:3},{value:"Troubleshooting &amp; FAQs",id:"troubleshooting--faqs",level:2},{value:"Breaking/Behavior Notes",id:"breakingbehavior-notes",level:2},{value:"Reference Types (abridged)",id:"reference-types-abridged",level:2},{value:"Final Advice",id:"final-advice",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"supastash-configuration",children:"Supastash Configuration"})}),"\n",(0,r.jsxs)(n.p,{children:["The configureSupastash() function sets up Supastash and must be called ",(0,r.jsx)(n.strong,{children:"once"})," at app startup"]}),"\n",(0,r.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { configureSupastash, defineLocalSchema } from "supastash";\nimport { supabase } from "./supabase";\nimport { openDatabaseAsync } from "expo-sqlite";\n\nconfigureSupastash({\n  dbName: "supastash_db",\n  supabaseClient: supabase,\n  sqliteClient: { openDatabaseAsync },\n  sqliteClientType: "expo",\n  debugMode: true,\n  onSchemaInit: async () => {\n    defineLocalSchema("users", {\n      id: "TEXT PRIMARY KEY",\n      name: "TEXT",\n      email: "TEXT",\n      created_at: "TIMESTAMP DEFAULT CURRENT_TIMESTAMP",\n      updated_at: "TIMESTAMP DEFAULT CURRENT_TIMESTAMP",\n    });\n  },\n  // Recommended hardening for name<=20/barcode flows\n  syncPolicy: {\n    nonRetryableCodes: new Set([\n      "23505",\n      "23502",\n      "23514",\n      "23P01",\n      "22001",\n      "22P02",\n    ]),\n    onNonRetryable: "accept-server",\n  },\n});\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Call ",(0,r.jsx)(n.strong,{children:"once at app startup"})," (before using any hooks)."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"whats-new-at-a-glance",children:"What\u2019s New (at a glance)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Merging rules clarified"})," for ",(0,r.jsx)(n.code,{children:"syncEngine"}),", ",(0,r.jsx)(n.code,{children:"excludeTables"}),", ",(0,r.jsx)(n.code,{children:"pollingInterval"}),", ",(0,r.jsx)(n.code,{children:"syncPolicy"}),", and ",(0,r.jsx)(n.code,{children:"fieldEnforcement"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Conflict behavior flag"}),": ",(0,r.jsx)(n.code,{children:"deleteConflictedRows"})," (off by default). When ",(0,r.jsx)(n.code,{children:"true"}),", non\u2011retryable conflicts delete local rows."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Policy plumbing"}),": ",(0,r.jsx)(n.code,{children:"DEFAULT_POLICY"})," and user policy merge; ",(0,r.jsx)(n.code,{children:"nonRetryableCodes"}),"/",(0,r.jsx)(n.code,{children:"retryableCodes"})," are ",(0,r.jsx)(n.strong,{children:"replaced"})," if provided (not unioned)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Field enforcement block"})," with sensible defaults and auto\u2011fill options."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optional"})," ",(0,r.jsx)(n.code,{children:"useCustomRPCForUpserts"})," flag for teams using RPC-based upserts."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(n.h3,{id:"configuresupastashtconfig",children:(0,r.jsx)(n.code,{children:"configureSupastash<T>(config)"})}),"\n",(0,r.jsx)(n.p,{children:"Initializes Supastash. Must be called once."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Type"}),": ",(0,r.jsx)(n.code,{children:"SupastashConfig<T> & { sqliteClientType: T }"})]}),"\n",(0,r.jsx)(n.h4,{id:"core-options",children:"Core options"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Option"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Notes"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"dbName"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"supastash_db"'})}),(0,r.jsx)(n.td,{children:"Name of local SQLite DB."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"supabaseClient"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SupabaseClient | null"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"required"})}),(0,r.jsx)(n.td,{children:"A configured Supabase client."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sqliteClient"})}),(0,r.jsx)(n.td,{children:"adapter for chosen engine"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"required"})}),(0,r.jsxs)(n.td,{children:["Shape depends on ",(0,r.jsx)(n.code,{children:"sqliteClientType"})," (see below)."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sqliteClientType"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"expo" | "rn-storage" | "rn-nitro" | null'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"required"})}),(0,r.jsx)(n.td,{children:"Selects SQLite engine."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"onSchemaInit"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"() => Promise<void>"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),(0,r.jsxs)(n.td,{children:["Optional hook to define local schema with ",(0,r.jsx)(n.code,{children:"defineLocalSchema"}),". Runs once after DB creation."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"debugMode"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),(0,r.jsx)(n.td,{children:"Verbose logs for sync/DB."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"listeners"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"250"})}),(0,r.jsx)(n.td,{children:"Max Realtime listeners."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"sync-switches--intervals",children:"Sync switches & intervals"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Option"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Notes"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"syncEngine.push"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),(0,r.jsx)(n.td,{children:"Push local changes to Supabase."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"syncEngine.pull"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"Enabled by default in code"}),". Only keep on if you\u2019ve secured tables with RLS and/or use ",(0,r.jsx)(n.a,{href:"/supastash/docs/useSupastashFilters",children:(0,r.jsx)(n.code,{children:"useSupastashFilters.ts"})})," for filtered pulls."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"syncEngine.useFiltersFromStore"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),(0,r.jsx)(n.td,{children:"Applies filters captured by hooks to background pulls."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pollingInterval.pull"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"30000"})}),(0,r.jsx)(n.td,{children:"ms between pull polls."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pollingInterval.push"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"30000"})}),(0,r.jsx)(n.td,{children:"ms between push polls."})]})]})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Recommendation"}),": If your RLS isn\u2019t airtight, set ",(0,r.jsx)(n.code,{children:"syncEngine.pull = false"})," globally and rely on per\u2011screen filtered pulls via ",(0,r.jsx)(n.a,{href:"/supastash/docs/useSupastashFilters",children:(0,r.jsx)(n.code,{children:"useSupastashFilters.ts"})}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"table-selection",children:"Table selection"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Option"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Notes"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"excludeTables.pull"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string[]"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[]"})}),(0,r.jsx)(n.td,{children:"Don\u2019t pull these tables."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"excludeTables.push"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string[]"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[]"})}),(0,r.jsx)(n.td,{children:"Don\u2019t push these tables."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"conflict-policy--field-enforcement",children:"Conflict policy & field enforcement"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Option"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Notes"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"syncPolicy"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SupastashSyncPolicy"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"DEFAULT_POLICY"})}),(0,r.jsxs)(n.td,{children:["See ",(0,r.jsx)(n.strong,{children:"Conflict Policy"})," below."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"fieldEnforcement"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"FieldEnforcement"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"DEFAULT_FIELDS"})}),(0,r.jsxs)(n.td,{children:["See ",(0,r.jsx)(n.strong,{children:"Field Enforcement"})," below."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"deleteConflictedRows"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})}),(0,r.jsxs)(n.td,{children:["When ",(0,r.jsx)(n.code,{children:"true"}),", non\u2011retryable conflicts will ",(0,r.jsx)(n.strong,{children:"delete"})," the local row."]})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"behavior--precedence-how-merges-work",children:"Behavior & Precedence (how merges work)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"configureSupastash"})," builds the final config like this:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"syncEngine"}),": ",(0,r.jsx)(n.strong,{children:"shallow-merged"}),". Provided keys override defaults."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"excludeTables"}),": ",(0,r.jsx)(n.strong,{children:"per-key fallback"}),". If you pass only ",(0,r.jsx)(n.code,{children:"pull"}),", existing ",(0,r.jsx)(n.code,{children:"push"})," is preserved (and vice\u2011versa)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pollingInterval"}),": ",(0,r.jsx)(n.strong,{children:"per-key fallback"})," (same pattern as ",(0,r.jsx)(n.code,{children:"excludeTables"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"syncPolicy"}),": ",(0,r.jsx)(n.strong,{children:"base"})," = ",(0,r.jsx)(n.code,{children:"DEFAULT_POLICY"})," \u2192 then old ",(0,r.jsx)(n.code,{children:"_config.syncPolicy"})," \u2192 then ",(0,r.jsx)(n.strong,{children:"your"})," ",(0,r.jsx)(n.code,{children:"config.syncPolicy"}),". For the two ",(0,r.jsx)(n.em,{children:"sets"})," inside policy:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nonRetryableCodes"}),": ",(0,r.jsx)(n.strong,{children:"replaced"})," by your provided set if given (no union)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"retryableCodes"}),": ",(0,r.jsx)(n.strong,{children:"replaced"})," by your provided set if given (no union)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fieldEnforcement"}),": base ",(0,r.jsx)(n.code,{children:"DEFAULT_FIELDS"})," \u2192 old \u2192 your overrides (shallow merge)."]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Practical upshot: if you want to ",(0,r.jsx)(n.strong,{children:"add"})," codes, you must supply a full set including the defaults you still want."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conflict-policy-default_policy",children:"Conflict Policy (DEFAULT_POLICY)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'nonRetryableCodes: new Set(["23505","23502","23514","23P01"]),\nretryableCodes:   new Set(["40001","40P01","55P03"]),\nfkCode:           "23503",\nonNonRetryable:   "accept-server",\nmaxTransientMs:   20 * 60 * 1000,\nmaxFkBlockMs:     24 * 60 * 60 * 1000,\nbackoffDelaysMs:  [10_000, 30_000, 120_000, 300_000, 600_000],\nmaxBatchAttempts: 5,\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Interpretation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"23505"})," (unique), ",(0,r.jsx)(n.code,{children:"23502"})," (not null), ",(0,r.jsx)(n.code,{children:"23514"})," (check), ",(0,r.jsx)(n.code,{children:"23P01"})," (exclusion) \u2192 ",(0,r.jsx)(n.strong,{children:"NON_RETRYABLE"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"23503"})," (FK) \u2192 ",(0,r.jsx)(n.strong,{children:"FK_BLOCK"})," (held up to ",(0,r.jsx)(n.code,{children:"maxFkBlockMs"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"40001"}),", ",(0,r.jsx)(n.code,{children:"40P01"}),", ",(0,r.jsx)(n.code,{children:"55P03"})," \u2192 ",(0,r.jsx)(n.strong,{children:"RETRYABLE"})," (backoff per ",(0,r.jsx)(n.code,{children:"backoffDelaysMs"}),", within ",(0,r.jsx)(n.code,{children:"maxTransientMs"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'onNonRetryable: "accept-server"'})," \u2192 default server\u2011wins resolution."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Row deletion switch"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If you want local rows actually ",(0,r.jsx)(n.strong,{children:"deleted"})," on non\u2011retryable conflicts, either:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["set ",(0,r.jsx)(n.code,{children:'syncPolicy.onNonRetryable = "delete-local"'}),", or"]}),"\n",(0,r.jsxs)(n.li,{children:["set top\u2011level ",(0,r.jsx)(n.code,{children:"deleteConflictedRows = true"})," (your handler respects this)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Recommended extra codes for prod"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'nonRetryableCodes: new Set([\n  "23505",\n  "23502",\n  "23514",\n  "23P01", // defaults\n  "22001", // string_data_right_truncation (name length caps)\n  "22P02", // invalid_text_representation (bad UUID/number)\n]);\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"field-enforcement-default_fields",children:"Field Enforcement (DEFAULT_FIELDS)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'requireCreatedAt: true,\nrequireUpdatedAt: true,\ncreatedAtField:   "created_at",\nupdatedAtField:   "updated_at",\nautoFillMissing:  true,\nautoFillDefaultISO: "1970-01-01T00:00:00Z",\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Enforces timestamp presence on all synced tables."}),"\n",(0,r.jsxs)(n.li,{children:["When ",(0,r.jsx)(n.code,{children:"autoFillMissing"})," is ",(0,r.jsx)(n.code,{children:"true"}),", absent values are backfilled with ",(0,r.jsx)(n.code,{children:"autoFillDefaultISO"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["You can rename the columns (e.g., ",(0,r.jsx)(n.code,{children:"created"}),"/",(0,r.jsx)(n.code,{children:"modified"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"sqlite-client-types",children:"SQLite Client Types"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Provide"}),(0,r.jsx)(n.th,{children:"Notes"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"expo"'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{ openDatabaseAsync }"})}),(0,r.jsx)(n.td,{children:"Simple & stable for most apps."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"rn-nitro"'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{ open }"})}),(0,r.jsx)(n.td,{children:"Best performance for large datasets."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"rn-storage"'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{ openDatabase }"})}),(0,r.jsx)(n.td,{children:"Legacy; widely supported."})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Adapter contract"}),"\nThe adapter you pass must ultimately satisfy ",(0,r.jsx)(n.code,{children:"SupastashSQLiteAdapter.openDatabaseAsync(name, sqliteClient)"})," and return a ",(0,r.jsx)(n.code,{children:"SupastashSQLiteDatabase"})," implementing ",(0,r.jsx)(n.code,{children:"runAsync"}),", ",(0,r.jsx)(n.code,{children:"getAllAsync"}),", ",(0,r.jsx)(n.code,{children:"getFirstAsync"}),", and ",(0,r.jsx)(n.code,{children:"execAsync"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"recipes",children:"Recipes"}),"\n",(0,r.jsx)(n.h3,{id:"enforce-unique-name-20-chars-per-shop-barcodes-unique-per-shop",children:"Enforce unique name (\u226420 chars) per shop; barcodes unique per shop"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'configureSupastash({\n  syncPolicy: {\n    nonRetryableCodes: new Set(["23505", "23502", "23514", "23P01", "22001"]),\n    onNonRetryable: "accept-server",\n  },\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Server Postgres unique indexes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"create extension if not exists unaccent;\n\ncreate unique index items_name_shop_uq on items (\n  shop_id,\n  lower(regexp_replace(unaccent(name), '\\\\s+', ' ', 'g'))\n) where deleted_at is null;\n\ncreate unique index items_barcode_shop_uq on items (\n  shop_id, barcode\n) where deleted_at is null and barcode is not null;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"delete-conflicted-rows-automatically",children:"Delete conflicted rows automatically"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'configureSupastash({\n  deleteConflictedRows: true,\n  syncPolicy: {\n    onNonRetryable: "delete-local",\n  },\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"override-polling--exclude-tables",children:"Override polling & exclude tables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'configureSupastash({\n  pollingInterval: { pull: 60_000, push: 15_000 },\n  excludeTables: { pull: ["audit_logs"], push: ["snapshots"] },\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"use-nitro-sqlite",children:"Use Nitro SQLite"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { open } from "react-native-nitro-sqlite";\nconfigureSupastash({ sqliteClientType: "rn-nitro", sqliteClient: { open } });\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting--faqs",children:"Troubleshooting & FAQs"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q: Will rows be deleted locally on conflicts?"}),(0,r.jsx)(n.br,{}),"\n","A: Only if you set ",(0,r.jsx)(n.code,{children:"deleteConflictedRows: true"})," or ",(0,r.jsx)(n.code,{children:"syncPolicy.onNonRetryable = 'delete-local'"}),". Otherwise the handler accepts the server row and stops retrying."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q: Do my custom error-code sets merge with defaults?"}),(0,r.jsx)(n.br,{}),"\n","A: No. If you supply ",(0,r.jsx)(n.code,{children:"nonRetryableCodes"}),"/",(0,r.jsx)(n.code,{children:"retryableCodes"}),", they ",(0,r.jsx)(n.strong,{children:"replace"})," the sets. Include defaults plus your additions."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q: Is pull enabled by default?"}),(0,r.jsx)(n.br,{}),"\n","A: In the current code, yes (",(0,r.jsx)(n.code,{children:"syncEngine.pull = true"}),"). If you want extra safety, set it to ",(0,r.jsx)(n.code,{children:"false"})," and rely on ",(0,r.jsx)(n.a,{href:"/supastash/docs/useSupastashFilters",children:"useSupastashFilters.ts"})," for filtered pulls or enable only after RLS is tight."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q: Can I push via a custom RPC?"}),(0,r.jsx)(n.br,{}),"\n","A: Yes\u2014toggle ",(0,r.jsx)(n.code,{children:"useCustomRPCForUpserts: true"})," and implement your RPC path in your sync layer."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"breakingbehavior-notes",children:"Breaking/Behavior Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Policy sets are ",(0,r.jsx)(n.strong,{children:"replacing"}),", not unioning."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"excludeTables"}),"/",(0,r.jsx)(n.code,{children:"pollingInterval"})," keys use ",(0,r.jsx)(n.strong,{children:"per\u2011key fallback"}),"; you can set just one without losing the other."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fieldEnforcement"})," defaults mandate timestamps; disable or rename if your schema differs."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"reference-types-abridged",children:"Reference Types (abridged)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export interface SupastashSyncPolicy {\n  nonRetryableCodes?: Set<string>;\n  retryableCodes?: Set<string>;\n  fkCode?: string; // default '23503'\n  onNonRetryable?: \"accept-server\" | \"delete-local\";\n  maxTransientMs?: number; // default 20m\n  maxFkBlockMs?: number; // default 24h\n  backoffDelaysMs?: number[]; // default [10s,30s,120s,300s,600s]\n  maxBatchAttempts?: number; // default 5\n  ensureParents?: (table: string, row: any) => Promise<\"ok\" | \"blocked\">;\n  onRowAcceptedServer?: (table: string, id: string) => void;\n  onRowDroppedLocal?: (table: string, id: string) => void;\n}\n\nexport interface FieldEnforcement {\n  requireCreatedAt?: boolean; // default true\n  requireUpdatedAt?: boolean; // default true\n  createdAtField?: string; // default 'created_at'\n  updatedAtField?: string; // default 'updated_at'\n  autoFillMissing?: boolean; // default true\n  autoFillDefaultISO?: string; // default '1970-01-01T00:00:00Z'\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"final-advice",children:"Final Advice"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Keep pull ",(0,r.jsx)(n.strong,{children:"on"})," only with solid RLS and/or filtered pulls."]}),"\n",(0,r.jsxs)(n.li,{children:["Add ",(0,r.jsx)(n.code,{children:"22001"})," and ",(0,r.jsx)(n.code,{children:"22P02"})," to ",(0,r.jsx)(n.code,{children:"nonRetryableCodes"})," for tighter UX."]}),"\n",(0,r.jsxs)(n.li,{children:["Prefer ",(0,r.jsx)(n.strong,{children:"server\u2011wins"})," for names; prompt users for barcode conflicts."]}),"\n",(0,r.jsxs)(n.li,{children:["If you truly need auto\u2011cleanups, enable ",(0,r.jsx)(n.code,{children:"deleteConflictedRows"})," and instrument ",(0,r.jsx)(n.code,{children:"onRowDroppedLocal"})," for visibility."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);