"use strict";(self.webpackChunksupastash_docs=self.webpackChunksupastash_docs||[]).push([[4684],{8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>c});var d=n(6540);const r={},l=d.createContext(r);function i(e){const s=d.useContext(l);return d.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),d.createElement(l.Provider,{value:s},e.children)}},9807:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>t,contentTitle:()=>c,default:()=>o,frontMatter:()=>i,metadata:()=>d,toc:()=>a});const d=JSON.parse('{"id":"data-access","title":"\ud83d\udce6 useSupastashData","description":"The useSupastashData hook is the core way to access and sync data in Supastash.","source":"@site/docs/data-access.md","sourceDirName":".","slug":"/data-access","permalink":"/supastash/docs/data-access","draft":false,"unlisted":false,"editUrl":"https://github.com/0xZekeA/supastash/tree/main/docs-site/docs/data-access.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"useSupastash","permalink":"/supastash/docs/useSupastash-hook"},"next":{"title":"Configuration","permalink":"/supastash/docs/configuration"}}');var r=n(4848),l=n(8453);const i={},c="\ud83d\udce6 useSupastashData",t={},a=[{value:"\ud83e\udde0 What It Does",id:"-what-it-does",level:2},{value:"\u2705 Key Features",id:"-key-features",level:2},{value:"\ud83e\uddea Basic Usage",id:"-basic-usage",level:2},{value:"\ud83d\udd0d With Filters, Lazy Load, and Callbacks",id:"-with-filters-lazy-load-and-callbacks",level:2},{value:"\ud83d\udce6 Return Values",id:"-return-values",level:2},{value:"\u2699\ufe0f Hook Options",id:"\ufe0f-hook-options",level:2},{value:"\ud83d\udd01 Advanced Callbacks",id:"-advanced-callbacks",level:2},{value:"<code>onInsertAndUpdate</code>",id:"oninsertandupdate",level:3},{value:"<code>onPushToRemote</code>",id:"onpushtoremote",level:3},{value:"\ud83d\udd04 Manual Refresh",id:"-manual-refresh",level:2},{value:"\ud83d\udd01 <code>refreshTable(table: string): void</code>",id:"-refreshtabletable-string-void",level:3},{value:"\ud83d\udd01 <code>refreshAllTables(): void</code>",id:"-refreshalltables-void",level:3},{value:"\u26a0\ufe0f <code>refreshTableWithPayload()</code> (Deprecated)",id:"\ufe0f-refreshtablewithpayload-deprecated",level:3},{value:"\ud83d\udd0d Behind the Scenes",id:"-behind-the-scenes",level:2},{value:"\ud83d\udca1 Best Practices",id:"-best-practices",level:2},{value:"\ud83d\udd17 What\u2019s Next",id:"-whats-next",level:2}];function h(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsxs)(s.h1,{id:"-usesupastashdata",children:["\ud83d\udce6 ",(0,r.jsx)(s.code,{children:"useSupastashData"})]})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"useSupastashData"})," hook is the ",(0,r.jsx)(s.strong,{children:"core way"})," to access and sync data in Supastash.\nIt handles ",(0,r.jsx)(s.strong,{children:"offline-first fetching"}),", ",(0,r.jsx)(s.strong,{children:"real-time updates"}),", ",(0,r.jsx)(s.strong,{children:"manual refreshes"}),", and ",(0,r.jsx)(s.strong,{children:"fine-grained event control"})," \u2014 all built on SQLite + Supabase."]}),"\n",(0,r.jsx)(s.p,{children:"This doc is your all-in-one guide to understanding how to use it properly."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-what-it-does",children:"\ud83e\udde0 What It Does"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"useSupastashData"})," is a React hook that:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Loads data instantly from your local SQLite table (even without internet)."}),"\n",(0,r.jsx)(s.li,{children:"Keeps that data in sync with Supabase \u2014 both ways."}),"\n",(0,r.jsxs)(s.li,{children:["Subscribes to Supabase realtime changes (",(0,r.jsx)(s.code,{children:"INSERT"}),", ",(0,r.jsx)(s.code,{children:"UPDATE"}),", ",(0,r.jsx)(s.code,{children:"DELETE"}),")."]}),"\n",(0,r.jsx)(s.li,{children:"Minimizes re-renders via smart batching + memoization."}),"\n",(0,r.jsx)(s.li,{children:"Supports filtering, grouping, lazy fetch, and custom callbacks."}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["It's made to be ",(0,r.jsx)(s.strong,{children:"plug-and-play"})," \u2014 but also powerful enough for edge cases."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-key-features",children:"\u2705 Key Features"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\ud83d\udd04 ",(0,r.jsx)(s.strong,{children:"Offline-first loading"})," from local database"]}),"\n",(0,r.jsxs)(s.li,{children:["\ud83d\udd0c ",(0,r.jsx)(s.strong,{children:"Realtime Supabase sync"})," (insert/update/delete)"]}),"\n",(0,r.jsxs)(s.li,{children:["\ud83e\udde0 ",(0,r.jsx)(s.strong,{children:"Memoized output"})," (no unnecessary renders)"]}),"\n",(0,r.jsxs)(s.li,{children:["\u23ef\ufe0f ",(0,r.jsx)(s.strong,{children:"Lazy mode"})," for manual control"]}),"\n",(0,r.jsxs)(s.li,{children:["\ud83d\udce4 ",(0,r.jsx)(s.strong,{children:"Custom callbacks"})," for push/pull sync events"]}),"\n",(0,r.jsxs)(s.li,{children:["\ud83d\udce6 ",(0,r.jsx)(s.strong,{children:"Batched updates"})," via ",(0,r.jsx)(s.code,{children:"flushIntervalMs"})]}),"\n",(0,r.jsxs)(s.li,{children:["\ud83d\udd0d ",(0,r.jsx)(s.strong,{children:"Filter-aware"})," both locally and remotely"]}),"\n",(0,r.jsxs)(s.li,{children:["\ud83e\udde9 ",(0,r.jsx)(s.strong,{children:"Grouping support"})," with ",(0,r.jsx)(s.code,{children:"extraMapKeys"})]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-basic-usage",children:"\ud83e\uddea Basic Usage"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",children:'const { data, dataMap } = useSupastashData<User>("orders");\n'})}),"\n",(0,r.jsxs)(s.p,{children:["This loads ",(0,r.jsx)(s.code,{children:"orders"})," from your local SQLite database, keeps it synced, and returns two things:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"data"})," \u2013 An array of all rows"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"dataMap"})," \u2013 A map keyed by ",(0,r.jsx)(s.code,{children:"id"})]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-with-filters-lazy-load-and-callbacks",children:"\ud83d\udd0d With Filters, Lazy Load, and Callbacks"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",children:'const { data, dataMap, trigger, cancel, groupedBy } = useSupastashData<{\n  id: string;\n}>("orders", {\n  shouldFetch: !!userId, // Only fetch if user is available\n  lazy: true, // Wait for manual trigger\n  flushIntervalMs: 200, // Reduce render frequency\n  filter: {\n    column: "user_id",\n    operator: "eq",\n    value: userId,\n  },\n  extraMapKeys: ["status", "user_id"],\n  onInsert: (order) => console.log("Inserted:", order),\n  onUpdate: (order) => console.log("Updated:", order),\n  onDelete: (order) => console.log("Deleted:", order),\n});\n\nuseEffect(() => {\n  trigger(); // Only needed if lazy: true\n}, []);\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-return-values",children:"\ud83d\udce6 Return Values"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"data"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"R[]"})}),(0,r.jsx)(s.td,{children:"Array of rows from local table"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"dataMap"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Map<string, R>"})}),(0,r.jsxs)(s.td,{children:["Keyed map of rows by their ",(0,r.jsx)(s.code,{children:"id"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"groupedBy"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Record<string, Map<string, R[]>>"})}),(0,r.jsx)(s.td,{children:"Optional grouped maps by field (if specified)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"trigger"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"() => void"})}),(0,r.jsx)(s.td,{children:"Starts fetch + subscription (if lazy)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"cancel"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"() => void"})}),(0,r.jsx)(s.td,{children:"Stops sync and fetch (useful for cleanup)"})]})]})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"\ufe0f-hook-options",children:"\u2699\ufe0f Hook Options"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Option"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Default"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"shouldFetch"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"boolean"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"true"})}),(0,r.jsx)(s.td,{children:"Fetch on mount?"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"lazy"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"boolean"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"false"})}),(0,r.jsxs)(s.td,{children:["If true, nothing runs until you call ",(0,r.jsx)(s.code,{children:"trigger()"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"extraMapKeys"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string[]"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsxs)(s.td,{children:["Build grouped maps (e.g., ",(0,r.jsx)(s.code,{children:"groupedBy.chat_id"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"filter"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"RealtimeFilter"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsxs)(s.td,{children:["Only sync matching rows (",(0,r.jsx)(s.code,{children:"eq"}),", ",(0,r.jsx)(s.code,{children:"lt"}),", etc.)"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"flushIntervalMs"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"number"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"100"})}),(0,r.jsx)(s.td,{children:"Debounce for batched UI updates"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"realtime"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"boolean"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"true"})}),(0,r.jsxs)(s.td,{children:["Subscribe to Supabase ",(0,r.jsx)(s.code,{children:"postgres_changes"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"limit"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"number"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"200"})}),(0,r.jsx)(s.td,{children:"Limit for local rows"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"daylength"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"number"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsxs)(s.td,{children:["Fetch only records from the last ",(0,r.jsx)(s.em,{children:"n"})," days"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"useFilterWhileSyncing"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"boolean"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"true"})}),(0,r.jsx)(s.td,{children:"Use same filter when syncing with Supabase"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"onInsert"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(item: any) => void"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsxs)(s.td,{children:["Called on Supabase ",(0,r.jsx)(s.code,{children:"INSERT"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"onUpdate"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(item: any) => void"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsxs)(s.td,{children:["Called on Supabase ",(0,r.jsx)(s.code,{children:"UPDATE"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"onDelete"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(item: any) => void"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsxs)(s.td,{children:["Called on Supabase ",(0,r.jsx)(s.code,{children:"DELETE"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"onInsertAndUpdate"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(item: any) => void"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsx)(s.td,{children:"Shortcut for insert + update"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"onPushToRemote"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(items: any[]) => Promise<boolean>"})}),(0,r.jsx)(s.td,{children:"\u2014"}),(0,r.jsx)(s.td,{children:"Handle custom push logic (must return success boolean)"})]})]})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-advanced-callbacks",children:"\ud83d\udd01 Advanced Callbacks"}),"\n",(0,r.jsx)(s.h3,{id:"oninsertandupdate",children:(0,r.jsx)(s.code,{children:"onInsertAndUpdate"})}),"\n",(0,r.jsx)(s.p,{children:'This fires on both inserts and updates from Supabase. Perfect for logic like marking messages as "received":'}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:'onInsertAndUpdate: async (payload) => {\n  const { data: local } = await supastash\n    .from("messages")\n    .select("*")\n    .eq("id", payload.id)\n    .run();\n\n  if (!local || local.is_received) return;\n\n  await supastash\n    .from("messages")\n    .upsert({ ...local, is_received: true })\n    .run();\n};\n'})}),"\n",(0,r.jsx)(s.h3,{id:"onpushtoremote",children:(0,r.jsx)(s.code,{children:"onPushToRemote"})}),"\n",(0,r.jsx)(s.p,{children:"Customize how local records get pushed to Supabase:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:'onPushToRemote: async (payload) => {\n  const result = await supabase.from("messages").upsert(payload);\n  return !result.error;\n};\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Return ",(0,r.jsx)(s.code,{children:"true"})," on success \u2014 Supastash will retry otherwise."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-manual-refresh",children:"\ud83d\udd04 Manual Refresh"}),"\n",(0,r.jsx)(s.p,{children:"Need to manually trigger a refresh? Use these from:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:'import {\n  refreshTable,\n  refreshAllTables,\n} from "supastash/utils/sync/refreshTables";\n'})}),"\n",(0,r.jsxs)(s.h3,{id:"-refreshtabletable-string-void",children:["\ud83d\udd01 ",(0,r.jsx)(s.code,{children:"refreshTable(table: string): void"})]}),"\n",(0,r.jsx)(s.p,{children:"For refreshing one table's local data:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:'refreshTable("orders");\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Emits a ",(0,r.jsx)(s.code,{children:"refresh:orders"})," event. Re-fetches local rows + triggers UI update."]}),"\n",(0,r.jsxs)(s.h3,{id:"-refreshalltables-void",children:["\ud83d\udd01 ",(0,r.jsx)(s.code,{children:"refreshAllTables(): void"})]}),"\n",(0,r.jsx)(s.p,{children:"Refreshes everything:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"refreshAllTables();\n"})}),"\n",(0,r.jsx)(s.p,{children:"Good after a full sync or reset."}),"\n",(0,r.jsxs)(s.h3,{id:"\ufe0f-refreshtablewithpayload-deprecated",children:["\u26a0\ufe0f ",(0,r.jsx)(s.code,{children:"refreshTableWithPayload()"})," (Deprecated)"]}),"\n",(0,r.jsxs)(s.p,{children:["This used to manually reflect data in the UI. No longer needed \u2014 use Supastash queries or ",(0,r.jsx)(s.code,{children:"refreshTable()"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:'// Deprecated \u2014 avoid\nrefreshTableWithPayload("orders", { id: "abc", ... }, "update");\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-behind-the-scenes",children:"\ud83d\udd0d Behind the Scenes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\ud83d\udd10 Supastash uses a ",(0,r.jsx)(s.strong,{children:"version-based cache"}),": if nothing changes, no re-renders."]}),"\n",(0,r.jsxs)(s.li,{children:["\ud83e\uddfc Realtime listeners are de-duped per ",(0,r.jsx)(s.code,{children:"table + filter"}),"."]}),"\n",(0,r.jsx)(s.li,{children:"\u26a1 Flushes UI updates only after debounce (default 100ms)."}),"\n",(0,r.jsxs)(s.li,{children:["\ud83e\udde0 Grouped maps (via ",(0,r.jsx)(s.code,{children:"extraMapKeys"}),") use ",(0,r.jsx)(s.code,{children:"Map<string, R[]>"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-best-practices",children:"\ud83d\udca1 Best Practices"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Use ",(0,r.jsx)(s.code,{children:"dataMap"})," for instant lookups (e.g., ",(0,r.jsx)(s.code,{children:"dataMap.get(id)"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Use ",(0,r.jsx)(s.code,{children:"groupedBy.chat_id"})," for message grouping"]}),"\n",(0,r.jsxs)(s.li,{children:["Use ",(0,r.jsx)(s.code,{children:"lazy: true"})," in modal screens or deeply nested routes"]}),"\n",(0,r.jsxs)(s.li,{children:["Bump ",(0,r.jsx)(s.code,{children:"flushIntervalMs"})," higher if syncing high-volume tables"]}),"\n",(0,r.jsxs)(s.li,{children:["Leverage ",(0,r.jsx)(s.code,{children:"onPushToRemote"})," for custom API pipelines"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-whats-next",children:"\ud83d\udd17 What\u2019s Next"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"/supastash/docs/configuration",children:"Configuration Guide"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"/supastash/docs/supastash-query-builder",children:"Query Builder Docs"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"/supastash/docs/useSupastash-hook",children:"Hook Reference"})}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.p,{children:["This hook is the ",(0,r.jsx)(s.strong,{children:"heart of Supastash"}),"."]})]})}function o(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);