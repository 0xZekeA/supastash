"use strict";(self.webpackChunksupastash_docs=self.webpackChunksupastash_docs||[]).push([[2359],{8453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>l});var r=n(6540);const t={},i=r.createContext(t);function d(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:s},e.children)}},9240:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"insert-query","title":".insert() method","description":"The .insert() method in Supastash lets you add new rows to your local SQLite table. It follows the Supabase pattern, but with offline-first logic built in \u2014 handling inserts locally first, then syncing to Supabase when possible.","source":"@site/docs/insert-query.md","sourceDirName":".","slug":"/insert-query","permalink":"/supastash/docs/insert-query","draft":false,"unlisted":false,"editUrl":"https://github.com/0xZekeA/supastash/tree/main/docs-site/docs/insert-query.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Run executions","permalink":"/supastash/docs/run-executions"},"next":{"title":".select() method","permalink":"/supastash/docs/select-query"}}');var t=n(4848),i=n(8453);const d={},l=".insert() method",a={},o=[{value:"\ud83e\udde0 How It Works",id:"-how-it-works",level:2},{value:"\ud83e\uddfe Supported Payloads",id:"-supported-payloads",level:2},{value:"1. <strong>Single Object</strong>",id:"1-single-object",level:3},{value:"2. <strong>Array of Objects</strong>",id:"2-array-of-objects",level:3},{value:"\ud83d\udd10 ID Handling",id:"-id-handling",level:2},{value:"\ud83d\udd01 Sync Modes",id:"-sync-modes",level:2},{value:"\u2705 Return Shape",id:"-return-shape",level:2},{value:"\u2705 When to Use <code>.insert()</code>",id:"-when-to-use-insert",level:2}];function c(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsxs)(s.h1,{id:"insert-method",children:[(0,t.jsx)(s.code,{children:".insert()"})," method"]})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:".insert()"})," method in Supastash lets you add new rows to your local SQLite table. It follows the Supabase pattern, but with offline-first logic built in \u2014 handling inserts locally first, then syncing to Supabase when possible."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"-how-it-works",children:"\ud83e\udde0 How It Works"}),"\n",(0,t.jsxs)(s.p,{children:["Calling ",(0,t.jsx)(s.code,{children:".insert()"})," performs the following steps internally:"]}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Validates the payload and target table."}),"\n",(0,t.jsxs)(s.li,{children:["Ensures every record has a valid ",(0,t.jsx)(s.code,{children:"id"}),". If missing, Supastash generates a UUID."]}),"\n",(0,t.jsxs)(s.li,{children:["Adds ",(0,t.jsx)(s.code,{children:"created_at"}),", ",(0,t.jsx)(s.code,{children:"updated_at"}),", and ",(0,t.jsx)(s.code,{children:"synced_at"})," fields if not already included."]}),"\n",(0,t.jsx)(s.li,{children:"Writes the data into the local database."}),"\n",(0,t.jsx)(s.li,{children:"Triggers background sync (based on the chosen sync mode)."}),"\n"]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["\ud83d\udd01 Supastash always returns the inserted payload as ",(0,t.jsx)(s.code,{children:"data"}),", either as a single object or an array \u2014 depending on how it was inserted."]}),"\n"]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["\u26a1 All non-",(0,t.jsx)(s.code,{children:"select"})," operations (insert, update, delete, upsert) use a ",(0,t.jsx)(s.strong,{children:"debounced version tracker"})," to group rapid updates and trigger a ",(0,t.jsx)(s.strong,{children:"single UI refresh per table"}),". This prevents unnecessary re-renders in high-frequency update scenarios."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"-supported-payloads",children:"\ud83e\uddfe Supported Payloads"}),"\n",(0,t.jsxs)(s.p,{children:["There are two accepted payload types for ",(0,t.jsx)(s.code,{children:".insert()"}),":"]}),"\n",(0,t.jsxs)(s.h3,{id:"1-single-object",children:["1. ",(0,t.jsx)(s.strong,{children:"Single Object"})]}),"\n",(0,t.jsx)(s.p,{children:"Used when you want to insert a single row:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'await supastash\n  .from("orders")\n  .insert({ id: "abc", amount: 500 })\n  .single() // Optional: to enforce one-row expectation\n  .run();\n'})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["You can optionally chain ",(0,t.jsx)(s.code,{children:".single()"})," to indicate only one row is expected."]}),"\n",(0,t.jsxs)(s.li,{children:["If you mistakenly pass an array with ",(0,t.jsx)(s.code,{children:".single()"}),", Supastash will throw:"]}),"\n"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-txt",children:".single() cannot be used with array payloads on INSERT to orders. Use a single object instead.\n"})}),"\n",(0,t.jsxs)(s.h3,{id:"2-array-of-objects",children:["2. ",(0,t.jsx)(s.strong,{children:"Array of Objects"})]}),"\n",(0,t.jsx)(s.p,{children:"Used for batch inserts:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'await supastash\n  .from("orders")\n  .insert([\n    { id: "o1", amount: 100 },\n    { id: "o2", amount: 200 },\n  ])\n  .run();\n'})}),"\n",(0,t.jsxs)(s.p,{children:["You shouldn\u2019t use ",(0,t.jsx)(s.code,{children:".single()"})," when inserting an array. Supastash will catch this at runtime and throw a clear error to let you know."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"-id-handling",children:"\ud83d\udd10 ID Handling"}),"\n",(0,t.jsxs)(s.p,{children:["Supastash guarantees every inserted row has an ",(0,t.jsx)(s.code,{children:"id"})," by default. If any record lacks one, it auto-generates a UUID. This removes the burden of generating IDs manually while ensuring consistency in syncing and querying later."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"-sync-modes",children:"\ud83d\udd01 Sync Modes"}),"\n",(0,t.jsx)(s.p,{children:"Sync behavior depends on the mode selected:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Mode"}),(0,t.jsx)(s.th,{children:"Behavior"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"localOnly"})}),(0,t.jsx)(s.td,{children:"Inserts only into SQLite"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"remoteOnly"})}),(0,t.jsx)(s.td,{children:"Sends directly to Supabase, skips local DB"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"localFirst"})}),(0,t.jsx)(s.td,{children:"(Default) Inserts locally, queues remote sync"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"remoteFirst"})}),(0,t.jsx)(s.td,{children:"Sends to Supabase first, mirrors to local on success"})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["You can control this with ",(0,t.jsx)(s.code,{children:'.syncMode("mode")'}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'await supastash\n  .from("orders")\n  .insert({ amount: 500 })\n  .syncMode("remoteFirst")\n  .run();\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"-return-shape",children:"\u2705 Return Shape"}),"\n",(0,t.jsxs)(s.p,{children:["All ",(0,t.jsx)(s.code,{children:".insert()"})," calls always return the inserted payload:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"{\n  data: [...insertedRecords],\n  error: null,\n  success: true\n}\n"})}),"\n",(0,t.jsxs)(s.p,{children:["If ",(0,t.jsx)(s.code,{children:".single()"})," was used, ",(0,t.jsx)(s.code,{children:"data"})," is a single object instead of an array."]}),"\n",(0,t.jsxs)(s.p,{children:["You can also opt to get Supabase response by passing ",(0,t.jsx)(s.code,{children:"{ viewRemoteResult: true }"})," to ",(0,t.jsx)(s.code,{children:".run()"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"{\n  local: {...},\n  remote: {...},\n  success: true\n}\n"})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsxs)(s.h2,{id:"-when-to-use-insert",children:["\u2705 When to Use ",(0,t.jsx)(s.code,{children:".insert()"})]}),"\n",(0,t.jsxs)(s.p,{children:["Use ",(0,t.jsx)(s.code,{children:".insert()"})," when:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Creating a new row or batch of rows"}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsxs)(s.p,{children:["Next: ",(0,t.jsx)(s.a,{href:"/supastash/docs/select-query",children:(0,t.jsx)(s.code,{children:".select()"})})]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);