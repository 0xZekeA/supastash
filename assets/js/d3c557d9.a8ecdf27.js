"use strict";(self.webpackChunksupastash_docs=self.webpackChunksupastash_docs||[]).push([[505],{4431:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"upsert-query","title":".upsert() method","description":"The .upsert() method in Supastash is a local-first merge operation that inserts or updates rows based on their id. If a row with the given id exists, it is updated; if not, a new one is inserted.","source":"@site/docs/upsert-query.md","sourceDirName":".","slug":"/upsert-query","permalink":"/supastash/docs/upsert-query","draft":false,"unlisted":false,"editUrl":"https://github.com/0xZekeA/supastash/tree/main/docs-site/docs/upsert-query.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":".delete() method","permalink":"/supastash/docs/delete-query"},"next":{"title":"Schema Management","permalink":"/supastash/docs/schema-management"}}');var t=n(4848),i=n(8453);const d={},c=".upsert() method",a={},l=[{value:"\ud83e\udde0 How It Works",id:"-how-it-works",level:2},{value:"\ud83e\uddfe Accepted Payloads",id:"-accepted-payloads",level:2},{value:"\ud83d\udd01 Sync Modes",id:"-sync-modes",level:2},{value:"\u23f1\ufe0f Timestamp Handling",id:"\ufe0f-timestamp-handling",level:2},{value:"\u2705 Return Shape",id:"-return-shape",level:2},{value:"\u26a0\ufe0f ID Requirement",id:"\ufe0f-id-requirement",level:2},{value:"\u2705 When to Use <code>.upsert()</code>",id:"-when-to-use-upsert",level:2}];function o(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsxs)(s.h1,{id:"upsert-method",children:[(0,t.jsx)(s.code,{children:".upsert()"})," method"]})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:".upsert()"})," method in Supastash is a local-first merge operation that inserts or updates rows based on their ",(0,t.jsx)(s.code,{children:"id"}),". If a row with the given ",(0,t.jsx)(s.code,{children:"id"})," exists, it is updated; if not, a new one is inserted."]}),"\n",(0,t.jsxs)(s.p,{children:["This operation is ideal when you want to ensure data exists without checking beforehand \u2014 combining the behavior of ",(0,t.jsx)(s.code,{children:".insert()"})," and ",(0,t.jsx)(s.code,{children:".update()"}),"."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"-how-it-works",children:"\ud83e\udde0 How It Works"}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["Each row is checked for existence using the provided ",(0,t.jsx)(s.code,{children:"onConflictKeys"})," (defaults to ",(0,t.jsx)(s.code,{children:'["id"]'}),"). If a match is found, the row is updated. Otherwise, it is inserted."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["When ",(0,t.jsx)(s.code,{children:".upsert()"})," is called:"]}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"The table and payload are validated."}),"\n",(0,t.jsxs)(s.li,{children:["Each row is inspected to check if it already exists (via ",(0,t.jsx)(s.code,{children:"id"}),")."]}),"\n",(0,t.jsxs)(s.li,{children:["If it exists \u2192 ",(0,t.jsx)(s.code,{children:"UPDATE"})," it."]}),"\n",(0,t.jsxs)(s.li,{children:["If not \u2192 ",(0,t.jsx)(s.code,{children:"INSERT"})," it."]}),"\n",(0,t.jsxs)(s.li,{children:["Auto-adds timestamps: ",(0,t.jsx)(s.code,{children:"updated_at"}),", and optionally ",(0,t.jsx)(s.code,{children:"synced_at"}),"."]}),"\n",(0,t.jsx)(s.li,{children:"Returns the upserted records from local DB."}),"\n"]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["\u26a1 Like other write operations, ",(0,t.jsx)(s.code,{children:".upsert()"})," uses a ",(0,t.jsx)(s.strong,{children:"debounced version tracker"})," to batch rapid changes and trigger a ",(0,t.jsx)(s.strong,{children:"single UI refresh per table"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"-accepted-payloads",children:"\ud83e\uddfe Accepted Payloads"}),"\n",(0,t.jsx)(s.p,{children:"You can pass a single object or an array of objects:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'// Single row\nawait supastash.from("users").upsert<T>({ id: "u1", name: "John" }).run();\n\n// Multiple rows\nawait supastash\n  .from("users")\n  .upsert<T>([\n    { id: "u1", name: "John" },\n    { id: "u2", name: "Doe" },\n  ])\n  .run();\n'})}),"\n",(0,t.jsxs)(s.p,{children:["If ",(0,t.jsx)(s.code,{children:".single()"})," is chained, the payload ",(0,t.jsx)(s.strong,{children:"must not"})," be an array."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'// With custom conflict keys\nawait supastash\n  .from("chats")\n  .upsert<T>(\n    { chat_id: "abc", user_id: "u1", status: "open" },\n    {\n      onConflictKeys: ["chat_id", "user_id"],\n    }\n  )\n  .run();\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"-sync-modes",children:"\ud83d\udd01 Sync Modes"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Mode"}),(0,t.jsx)(s.th,{children:"Behavior"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"localOnly"})}),(0,t.jsx)(s.td,{children:"Performs upsert only on SQLite"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"remoteOnly"})}),(0,t.jsx)(s.td,{children:"Sends entire upsert payload to Supabase, skips local"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"localFirst"})}),(0,t.jsx)(s.td,{children:"(Default) Performs locally, queues sync to Supabase"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"remoteFirst"})}),(0,t.jsx)(s.td,{children:"Sends to Supabase first, mirrors to local if successful"})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["You can set sync behavior using ",(0,t.jsx)(s.code,{children:'.syncMode("...")'}),"."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"\ufe0f-timestamp-handling",children:"\u23f1\ufe0f Timestamp Handling"}),"\n",(0,t.jsx)(s.p,{children:"Supastash helps you keep data in sync by managing timestamps consistently:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["When using ",(0,t.jsx)(s.a,{href:"/supastash/docs/update-query",children:(0,t.jsx)(s.code,{children:".update()"})})," or ",(0,t.jsx)(s.code,{children:".upsert()"}),", ",(0,t.jsxs)(s.strong,{children:["if your payload does not include an ",(0,t.jsx)(s.code,{children:"updated_at"})," field"]}),", Supastash will automatically assign ",(0,t.jsx)(s.code,{children:"updated_at = new Date().toISOString()"})," before saving locally and syncing remotely."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"This ensures reliable sync conflict resolution and avoids stale data."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["Want to preserve a custom ",(0,t.jsx)(s.code,{children:"updated_at"})," value (e.g., from an imported backup or pre-synced record)?\nSimply include it in your payload:"]}),"\n"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'await supastash\n  .from("tasks")\n  .upsert({ id: "xyz", title: "Fix bug", updated_at: oldDate })\n  .run();\n'})}),"\n",(0,t.jsxs)(s.p,{children:["If ",(0,t.jsx)(s.code,{children:"updated_at"})," is explicitly set to ",(0,t.jsx)(s.code,{children:"null"})," or ",(0,t.jsx)(s.code,{children:"undefined"}),", it will be ",(0,t.jsx)(s.strong,{children:"replaced with the current timestamp"})," unless ",(0,t.jsx)(s.code,{children:"preserveTimestamp"})," is configured."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["\u26a0\ufe0f For full control, use ",(0,t.jsx)(s.code,{children:".preserveTimestamp(true)"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"-return-shape",children:"\u2705 Return Shape"}),"\n",(0,t.jsx)(s.p,{children:"If successful:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"{\n  data: [...or single object],\n  error: null,\n  success: true\n}\n"})}),"\n",(0,t.jsx)(s.p,{children:"If something fails:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'{\n  data: null,\n  error: { message: "..." },\n  success: false\n}\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"\ufe0f-id-requirement",children:"\u26a0\ufe0f ID Requirement"}),"\n",(0,t.jsxs)(s.p,{children:["Every item must include an ",(0,t.jsx)(s.code,{children:"id"})," field. If ",(0,t.jsx)(s.code,{children:"id"})," is missing, the operation will fail."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'await supastash.from("products").upsert({ name: "Invalid" }); // \u274c no id\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsxs)(s.h2,{id:"-when-to-use-upsert",children:["\u2705 When to Use ",(0,t.jsx)(s.code,{children:".upsert()"})]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Inserting or updating without worrying about row existence"}),"\n",(0,t.jsx)(s.li,{children:"Syncing external or merged data sources"}),"\n",(0,t.jsx)(s.li,{children:"Avoiding manual existence checks before saving"}),"\n",(0,t.jsx)(s.li,{children:"Supporting conflict-free offline modifications"}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsxs)(s.p,{children:["Next: ",(0,t.jsxs)(s.a,{href:"/supastash/docs/run-executions",children:[(0,t.jsx)(s.code,{children:".run()"})," / ",(0,t.jsx)(s.code,{children:".execute()"})]})," behaviors"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>c});var r=n(6540);const t={},i=r.createContext(t);function d(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);