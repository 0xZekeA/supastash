"use strict";(self.webpackChunksupastash_docs=self.webpackChunksupastash_docs||[]).push([[3953],{3812:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"schema-management","title":"schema-management","description":"\ud83e\uddf1 defineLocalSchema(...)","source":"@site/docs/schema-management.md","sourceDirName":".","slug":"/schema-management","permalink":"/supastash/docs/schema-management","draft":false,"unlisted":false,"editUrl":"https://github.com/0xZekeA/supastash/tree/main/docs-site/docs/schema-management.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":".upsert() method","permalink":"/supastash/docs/upsert-query"},"next":{"title":"Destructive Operations","permalink":"/supastash/docs/destructives"}}');var r=s(4848),l=s(8453);const t={},d=void 0,a={},c=[{value:"\ud83e\uddf1 <code>defineLocalSchema(...)</code>",id:"-definelocalschema",level:2},{value:"\u26a0\ufe0f Important Notes",id:"\ufe0f-important-notes",level:3},{value:"\ud83e\uddea Example",id:"-example",level:3},{value:"\ud83d\udd27 Parameters",id:"-parameters",level:3},{value:"\ud83e\uddf1 Required Columns",id:"-required-columns",level:3},{value:"\ud83d\udca1 Column Type Support",id:"-column-type-support",level:3},{value:"\ud83d\udd11 Foreign Keys",id:"-foreign-keys",level:3},{value:"\ud83d\udcc8 Indexes",id:"-indexes",level:3},{value:"\ud83e\uddfc Resetting a Table",id:"-resetting-a-table",level:3},{value:"\ud83d\udcda Related",id:"-related",level:3}];function o(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h2,{id:"-definelocalschema",children:["\ud83e\uddf1 ",(0,r.jsx)(n.code,{children:"defineLocalSchema(...)"})]}),"\n",(0,r.jsx)(n.p,{children:"Manually defines the schema for a local SQLite table used by Supastash, with support for foreign keys and indexed columns."}),"\n",(0,r.jsx)(n.p,{children:"This is helpful for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Explicitly controlling column types and constraints."}),"\n",(0,r.jsx)(n.li,{children:"Defining foreign keys and SQL indexes."}),"\n",(0,r.jsxs)(n.li,{children:["Ensuring default values and modifiers (e.g., ",(0,r.jsx)(n.code,{children:"NOT NULL"}),", ",(0,r.jsx)(n.code,{children:"DEFAULT CURRENT_TIMESTAMP"}),") are present."]}),"\n",(0,r.jsxs)(n.li,{children:["Pre-defining tables before ",(0,r.jsx)(n.code,{children:"useSupastashData(...)"})," is called."]}),"\n",(0,r.jsx)(n.li,{children:"Avoiding runtime table creation when strict structure is required."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-important-notes",children:"\u26a0\ufe0f Important Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"useSupastashData(...)"})," will automatically ",(0,r.jsx)(n.strong,{children:"create tables"})," using Supabase metadata via ",(0,r.jsx)(n.a,{href:"./getting-started#3-enable-rls-support-server-side-setup",children:(0,r.jsx)(n.code,{children:"get_table_schema"})}),".\nHowever:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["It does ",(0,r.jsx)(n.strong,{children:"not"})," include default values, modifiers, or indexes."]}),"\n",(0,r.jsxs)(n.li,{children:["It does ",(0,r.jsx)(n.strong,{children:"not"})," apply constraints like ",(0,r.jsx)(n.code,{children:"UNIQUE"}),", ",(0,r.jsx)(n.code,{children:"DEFAULT"}),", or ",(0,r.jsx)(n.code,{children:"FOREIGN KEY"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If your table needs any of these \u2014 ",(0,r.jsxs)(n.strong,{children:["you must call ",(0,r.jsx)(n.code,{children:"defineLocalSchema(...)"})," yourself"]}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-example",children:"\ud83e\uddea Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { defineLocalSchema } from "supastash";\n\nawait defineLocalSchema(\n  "users",\n  {\n    id: "TEXT PRIMARY KEY",\n    full_name: "TEXT NOT NULL",\n    email: "TEXT UNIQUE NOT NULL",\n    user_id: "TEXT NOT NULL",\n    __indices: ["email", "user_id"],\n  },\n  true\n);\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-parameters",children:"\ud83d\udd27 Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"tableName"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"The name of the table to create."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"schema"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LocalSchemaDefinition"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"The column definitions and optional index/foreign key metadata."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"deletePreviousSchema"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"boolean"})," (default: ",(0,r.jsx)(n.code,{children:"false"}),")"]}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsxs)(n.td,{children:["If ",(0,r.jsx)(n.code,{children:"true"}),", drops any existing table and Supastash sync state for that table."]})]})]})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,r.jsxs)(n.strong,{children:["Avoid using ",(0,r.jsx)(n.code,{children:"deletePreviousSchema = true"})," in production."]}),"\nThis will wipe local data for that table."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-required-columns",children:"\ud83e\uddf1 Required Columns"}),"\n",(0,r.jsx)(n.p,{children:"Supastash automatically includes these columns for sync and soft-delete support:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'{\n  created_at: "TEXT NOT NULL",\n  updated_at: "TEXT NOT NULL",\n  synced_at: "TEXT DEFAULT NULL",\n  deleted_at: "TEXT DEFAULT NULL",\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You must include a valid ",(0,r.jsx)(n.code,{children:"id"})," column (",(0,r.jsx)(n.code,{children:"TEXT PRIMARY KEY"}),") or the function will throw."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-column-type-support",children:"\ud83d\udca1 Column Type Support"}),"\n",(0,r.jsx)(n.p,{children:"Use standard SQLite-compatible strings:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'{\n  id: "TEXT PRIMARY KEY",\n  quantity: "INTEGER NOT NULL",\n  price: "REAL",\n  active: "INTEGER DEFAULT 1",\n  created_at: "TEXT DEFAULT CURRENT_TIMESTAMP"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can combine modifiers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'name: "TEXT NOT NULL UNIQUE";\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-foreign-keys",children:"\ud83d\udd11 Foreign Keys"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Supastash does ",(0,r.jsx)(n.strong,{children:"not support foreign keys"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Foreign key constraints are disabled because ",(0,r.jsx)(n.strong,{children:"child records can sync before their parent records"}),". For example, a ",(0,r.jsx)(n.code,{children:"soldItem"})," might arrive before the related ",(0,r.jsx)(n.code,{children:"sale"})," during offline sync. Enforcing foreign keys would cause these inserts to fail and break sync reliability."]}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"__indices"})," for performance, and handle relationships in Supabase or app logic."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-indexes",children:"\ud83d\udcc8 Indexes"}),"\n",(0,r.jsx)(n.p,{children:"To define SQL indexes on specific columns:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'__indices: ["email", "user_id"];\n'})}),"\n",(0,r.jsx)(n.p,{children:"This will create:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);\nCREATE INDEX IF NOT EXISTS idx_users_user_id ON users(user_id);\n"})}),"\n",(0,r.jsx)(n.p,{children:"All columns listed here must also exist in the schema, or an error will be thrown."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-resetting-a-table",children:"\ud83e\uddfc Resetting a Table"}),"\n",(0,r.jsx)(n.p,{children:"To drop and re-create the table (e.g., during development):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'await defineLocalSchema("users", schema, true);\n'})}),"\n",(0,r.jsx)(n.p,{children:"This drops the table and clears all associated Supastash sync metadata."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-related",children:"\ud83d\udcda Related"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.code,{children:"useSupastashData(...)"}),": Automatically creates tables, but without constraints or default values."]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c Does ",(0,r.jsx)(n.em,{children:"not"})," apply default modifiers or foreign keys \u2014 use ",(0,r.jsx)(n.code,{children:"defineLocalSchema(...)"})," when you need control."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>d});var i=s(6540);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);