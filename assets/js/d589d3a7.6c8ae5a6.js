"use strict";(self.webpackChunksupastash_docs=self.webpackChunksupastash_docs||[]).push([[7924],{6475:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"getting-started","title":"\ud83d\ude80 Getting Started with Supastash","description":"Installation","source":"@site/docs/getting-started.md","sourceDirName":".","slug":"/getting-started","permalink":"/supastash/docs/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/0xZekeA/supastash/tree/main/docs-site/docs/getting-started.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","next":{"title":"Supastash Query Builder","permalink":"/supastash/docs/supastash-query-builder"}}');var t=n(4848),r=n(8453);const i={},l="\ud83d\ude80 Getting Started with Supastash",d={},o=[{value:"Installation",id:"installation",level:2},{value:"\ud83d\udcce Required Peer Dependencies",id:"-required-peer-dependencies",level:3},{value:"\ud83d\uddc3\ufe0f Choose one SQLite adapter.",id:"\ufe0f-choose-one-sqlite-adapter",level:3},{value:"\u2699\ufe0f Setup",id:"\ufe0f-setup",level:2},{value:"1. Configure Supastash",id:"1-configure-supastash",level:3},{value:"2. Initialize Supastash(in your entry layout)",id:"2-initialize-supastashin-your-entry-layout",level:3},{value:"3. Enable RLS Support (Server-Side Setup)",id:"3-enable-rls-support-server-side-setup",level:3},{value:"4. Enable Sync Engine(Client-Side Setup)",id:"4-enable-sync-engineclient-side-setup",level:3},{value:"\ud83e\uddea Basic Usage",id:"-basic-usage",level:2},{value:"<code>useSupatashData</code> Local-First React Hook",id:"usesupatashdata-local-first-react-hook",level:3},{value:"<code>useSupatashData</code> with \ud83d\udd0d Filtering",id:"usesupatashdata-with--filtering",level:3},{value:"<code>supastash</code> \u2013 Supabase Query Builder",id:"supastash--supabase-query-builder",level:3},{value:"\ud83d\udd17 What\u2019s Next?",id:"-whats-next",level:3}];function u(e){const s={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"-getting-started-with-supastash",children:"\ud83d\ude80 Getting Started with Supastash"})}),"\n",(0,t.jsx)(s.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"npm install supastash\n"})}),"\n",(0,t.jsx)(s.h3,{id:"-required-peer-dependencies",children:"\ud83d\udcce Required Peer Dependencies"}),"\n",(0,t.jsx)(s.p,{children:"You MUST install the following manually."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"npm install @supabase/supabase-js\n             @react-native-community/netinfo\n             react\n             react-native\n\n"})}),"\n",(0,t.jsx)(s.h3,{id:"\ufe0f-choose-one-sqlite-adapter",children:"\ud83d\uddc3\ufe0f Choose one SQLite adapter."}),"\n",(0,t.jsx)(s.p,{children:"Depending on your setup, install only one."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"# For Expo\nnpm install expo-sqlite\n\n# For bare React Native with better performance\nnpm install react-native-nitro-sqlite\n\n# Or classic SQLite option\nnpm install react-native-sqlite-storage\n"})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"\ufe0f-setup",children:"\u2699\ufe0f Setup"}),"\n",(0,t.jsx)(s.h3,{id:"1-configure-supastash",children:"1. Configure Supastash"}),"\n",(0,t.jsxs)(s.p,{children:["This should be done early (e.g., in lib/supastash.ts). ",(0,t.jsx)(s.a,{href:"/supastash/docs/configuration",children:"Supastash configuration docs"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'// lib/supastash.ts\nimport { configureSupastash, defineLocalSchema } from "supastash";\nimport { supabase } from "./supabase";\nimport { openDatabaseAsync } from "expo-sqlite";\n\nconfigureSupastash({\n  supabaseClient: supabase,\n  dbName: "supastash_db",\n  sqliteClient: { openDatabaseAsync },\n  sqliteClientType: "expo", // or "rn-nitro" or "rn-storage"\n\n  onSchemaInit: () => {\n    // Define your local schema here. You can include this is a separate file, then call it here.\n    defineLocalSchema(\n      "users",\n      {\n        id: "TEXT PRIMARY KEY",\n        name: "TEXT",\n        email: "TEXT",\n        created_at: "TIMESTAMP DEFAULT CURRENT_TIMESTAMP",\n        updated_at: "TIMESTAMP DEFAULT CURRENT_TIMESTAMP",\n      },\n      true\n    );\n  },\n\n  debugMode: true, // useful for logging\n  syncEngine: {\n    push: true,\n    pull: false, // \u26a0\ufe0f Pull sync is disabled by default. It will pull unfiltered data from the server. Enable RLS if you want to pull filtered data.\n  },\n});\n'})}),"\n",(0,t.jsx)(s.h3,{id:"2-initialize-supastashin-your-entry-layout",children:"2. Initialize Supastash(in your entry layout)"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'// _layout.tsx or App.tsx (entry layout)\nimport "@/lib/supastash";\n\nexport default function RootLayout() {\n  return <Stack />;\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"3-enable-rls-support-server-side-setup",children:"3. Enable RLS Support (Server-Side Setup)"}),"\n",(0,t.jsx)(s.p,{children:"Supastash uses a helper RPC function to fetch column metadata, which is essential for syncing."}),"\n",(0,t.jsxs)(s.p,{children:["To set it up, run the SQL function below in the ",(0,t.jsx)(s.strong,{children:"Supabase SQL Editor (Server-side)"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"create or replace function get_table_schema(table_name text)\nreturns table(\n  column_name text,\n  data_type text,\n  is_nullable text\n)\nsecurity definer\nas $$\n  select\n    column_name,\n    data_type,\n    is_nullable\n  from information_schema.columns\n  where table_schema = 'public'\n    and table_name = $1;\n$$ language sql;\n\ngrant execute on function get_table_schema(text) to anon, authenticated;\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This allows Supastash to access column details for public tables \u2014 even when ",(0,t.jsx)(s.strong,{children:"Row-Level Security (RLS)"})," is enabled."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["\u26a0\ufe0f ",(0,t.jsx)(s.strong,{children:"Important:"}),(0,t.jsx)(s.br,{}),"\n","All Supabase timestamp columns used for syncing \u2014 such as ",(0,t.jsx)(s.code,{children:"created_at"}),", ",(0,t.jsx)(s.code,{children:"updated_at"})," and ",(0,t.jsx)(s.code,{children:"deleted_at"})," \u2014 ",(0,t.jsxs)(s.strong,{children:["must be of type ",(0,t.jsx)(s.code,{children:"timestamptz"})]})," (timestamp with time zone).",(0,t.jsx)(s.br,{}),"\n","This ensures consistent comparisons across devices and avoids missing records due to timezone mismatches."]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"4-enable-sync-engineclient-side-setup",children:["4. Enable ",(0,t.jsx)(s.a,{href:"/supastash/docs/useSupastash-hook",children:"Sync Engine(Client-Side Setup)"})]}),"\n",(0,t.jsx)(s.p,{children:"This hook prepares the sync engine. Place this before rendering the rest of your app."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'import { useSupatash } from "supastash";\n\nconst { dbReady } = useSupatash();\nif (!dbReady) return null;\nreturn <Stack />;\n'})}),"\n",(0,t.jsx)(s.h2,{id:"-basic-usage",children:"\ud83e\uddea Basic Usage"}),"\n",(0,t.jsxs)(s.h3,{id:"usesupatashdata-local-first-react-hook",children:[(0,t.jsx)(s.a,{href:"/supastash/docs/data-access",children:(0,t.jsx)(s.code,{children:"useSupatashData"})})," Local-First React Hook"]}),"\n",(0,t.jsx)(s.p,{children:"This hook fetches and subscribes to local SQLite data, keeping it synced in the background."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'import { useSupatashData } from "supastash";\n\ntype Order = {\n  id: string;\n  user_id: string;\n  deleted_at: string | null;\n  updated_at: string;\n  created_at: string;\n};\n\nconst { data: orders, dataMap: ordersMap } = useSupatashData<Order>("orders");\n'})}),"\n",(0,t.jsxs)(s.h3,{id:"usesupatashdata-with--filtering",children:[(0,t.jsx)(s.code,{children:"useSupatashData"})," with \ud83d\udd0d Filtering"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'import { useSupatashData } from "supastash";\n\ntype Order = {\n  id: string;\n  user_id: string;\n  deleted_at: string | null;\n  updated_at: string;\n  created_at: string;\n};\n\n// Filtered\nconst { userId } = useAuth(); // assume you\'re managing auth\nconst { data: userOrders } = useSupatashData<Order>("orders", {\n  filter: { column: "user_id", operator: "eq", value: userId },\n  shouldFetch: !!userId, // prevents query if no userId yet\n});\n'})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"data \u2013 Array of rows"}),"\n",(0,t.jsx)(s.li,{children:"dataMap \u2013 Keyed by id, useful for constant-time lookups"}),"\n",(0,t.jsx)(s.li,{children:"Automatically stays in sync with local writes"}),"\n",(0,t.jsx)(s.li,{children:"Pushes changes to Supabase"}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsxs)(s.h3,{id:"supastash--supabase-query-builder",children:[(0,t.jsx)(s.a,{href:"/supastash/docs/supastash-query-builder",children:(0,t.jsx)(s.code,{children:"supastash"})})," \u2013 Supabase Query Builder"]}),"\n",(0,t.jsxs)(s.p,{children:["A thin wrapper around ",(0,t.jsx)(s.code,{children:"supabase.from(...)"})," that fits seamlessly with Supastash\u2019s local-first approach. Best used for direct, one-off queries to the server."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'import { supastash } from "supastash";\n\nconst [orders, setOrders] = useState([]);\n\nuseEffect(() => {\n  const fetchOrders = async () => {\n    const { data, error } = await supastash.from("orders").select("*").run();\n    if (error) {\n      console.error(error);\n      return;\n    }\n    setOrders(data);\n  };\n\n  fetchOrders();\n}, []);\n\nreturn <Text>{JSON.stringify(orders)}</Text>;\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-whats-next",children:"\ud83d\udd17 What\u2019s Next?"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/supastash/docs/configuration",children:"Configuration docs"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/supastash/docs/data-access",children:"Data Access docs"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/supastash/docs/useSupastash-hook",children:"useSupastash docs"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/supastash/docs/supastash-query-builder",children:"Query Builder docs"})}),"\n"]})]})}function c(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var a=n(6540);const t={},r=a.createContext(t);function i(e){const s=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(r.Provider,{value:s},e.children)}}}]);