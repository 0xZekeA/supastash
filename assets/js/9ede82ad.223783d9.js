"use strict";(self.webpackChunksupastash_docs=self.webpackChunksupastash_docs||[]).push([[3953],{3812:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"schema-management","title":"schema-management","description":"\ud83e\uddf1 defineLocalSchema(...)","source":"@site/docs/schema-management.md","sourceDirName":".","slug":"/schema-management","permalink":"/supastash/docs/schema-management","draft":false,"unlisted":false,"editUrl":"https://github.com/0xZekeA/supastash/tree/main/docs-site/docs/schema-management.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":".upsert() method","permalink":"/supastash/docs/upsert-query"},"next":{"title":"Destructive Operations","permalink":"/supastash/docs/destructives"}}');var t=n(4848),d=n(8453);const l={},r=void 0,c={},a=[{value:"\ud83e\uddf1 <code>defineLocalSchema(...)</code>",id:"-definelocalschema",level:2},{value:"\ud83e\udde9 What It Does",id:"-what-it-does",level:3},{value:"\ud83d\udeab What It Doesn\u2019t Do",id:"-what-it-doesnt-do",level:3},{value:"\ud83d\udca1 When To Use",id:"-when-to-use",level:3},{value:"\ud83e\uddea Example",id:"-example",level:3},{value:"\u2699\ufe0f Parameters",id:"\ufe0f-parameters",level:3},{value:"\ud83d\udce6 Required Columns",id:"-required-columns",level:3},{value:"\ud83d\udcc8 Indexing Behavior",id:"-indexing-behavior",level:3},{value:"\u2705 Auto-created indexes (if column exists)",id:"-auto-created-indexes-if-column-exists",level:4},{value:"\u2699\ufe0f Custom indexes",id:"\ufe0f-custom-indexes",level:4},{value:"\ud83e\uddfc Resetting a Table",id:"-resetting-a-table",level:3},{value:"\ud83d\udd17 Related",id:"-related",level:3}];function o(e){const s={blockquote:"blockquote",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.h2,{id:"-definelocalschema",children:["\ud83e\uddf1 ",(0,t.jsx)(s.code,{children:"defineLocalSchema(...)"})]}),"\n",(0,t.jsxs)(s.p,{children:["Programmatically creates or refreshes a ",(0,t.jsx)(s.strong,{children:"local SQLite table"})," used by Supastash.\nIt provides full control over your schema, including column definitions, constraints, and indexes \u2014 ensuring consistent structure across devices."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-what-it-does",children:"\ud83e\udde9 What It Does"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Creates the table ",(0,t.jsx)(s.strong,{children:"exactly as defined"})," (columns, types, modifiers)."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Automatically adds missing ",(0,t.jsx)(s.strong,{children:"system columns"})," required for sync and soft deletes:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'{\n  created_at: "TEXT NOT NULL",\n  updated_at: "TEXT NOT NULL",\n  synced_at: "TEXT DEFAULT NULL",\n  deleted_at: "TEXT DEFAULT NULL",\n}\n'})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Validates that all columns in ",(0,t.jsx)(s.code,{children:"__indices"})," exist before creating indexes."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Automatically creates ",(0,t.jsx)(s.strong,{children:"indexes"})," for the following columns (if present):"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"synced_at"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"deleted_at"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"created_at"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"updated_at"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Creates any additional indexes listed under ",(0,t.jsx)(s.code,{children:"__indices"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Optionally ",(0,t.jsx)(s.strong,{children:"drops"})," the existing table and clears Supastash sync state when ",(0,t.jsx)(s.code,{children:"deletePreviousSchema = true"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-what-it-doesnt-do",children:"\ud83d\udeab What It Doesn\u2019t Do"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Does ",(0,t.jsx)(s.strong,{children:"not"})," infer default values, unique constraints, or foreign keys from Supabase metadata."]}),"\n",(0,t.jsxs)(s.li,{children:["Does ",(0,t.jsx)(s.strong,{children:"not"})," enforce foreign keys \u2014 by design \u2014 since related records may sync out of order."]}),"\n",(0,t.jsxs)(s.li,{children:["Does ",(0,t.jsx)(s.strong,{children:"not"})," create composite or partial indexes automatically (you can define these manually under ",(0,t.jsx)(s.code,{children:"__constraints"}),")."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-when-to-use",children:"\ud83d\udca1 When To Use"}),"\n",(0,t.jsxs)(s.p,{children:["Use ",(0,t.jsx)(s.code,{children:"defineLocalSchema(...)"})," when you need:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Strict, predictable table shapes (types, defaults, constraints)."}),"\n",(0,t.jsx)(s.li,{children:"Local indexes for faster sync and lookups."}),"\n",(0,t.jsx)(s.li,{children:"Control over structure without relying on runtime inference."}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["If you don\u2019t need any of these, ",(0,t.jsx)(s.code,{children:"useSupastashData(...)"})," can auto-create tables \u2014 but without modifiers or indexes."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-example",children:"\ud83e\uddea Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'import { defineLocalSchema } from "supastash";\n\nawait defineLocalSchema(\n  "users",\n  {\n    id: "TEXT PRIMARY KEY",\n    full_name: "TEXT NOT NULL",\n    email: "TEXT UNIQUE NOT NULL",\n    user_id: "TEXT NOT NULL",\n\n    // additional indexes beyond default sync columns\n    __indices: ["email", "user_id"],\n\n    // optional composite / partial constraints\n    // __constraints: "CREATE INDEX IF NOT EXISTS idx_users_shop_synced ON users(shop_id, synced_at)"\n  },\n  true // \u26a0\ufe0f drops and recreates table + clears local sync state\n);\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"\ufe0f-parameters",children:"\u2699\ufe0f Parameters"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Name"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Required"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"tableName"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"string"})}),(0,t.jsx)(s.td,{children:"\u2705"}),(0,t.jsx)(s.td,{children:"The name of the local SQLite table."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"schema"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"LocalSchemaDefinition"})}),(0,t.jsx)(s.td,{children:"\u2705"}),(0,t.jsx)(s.td,{children:"The column definitions and optional index/constraint metadata."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"deletePreviousSchema"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"boolean"})," (default: ",(0,t.jsx)(s.code,{children:"false"}),")"]}),(0,t.jsx)(s.td,{children:"\u274c"}),(0,t.jsx)(s.td,{children:"Drop the table and Supastash sync state before recreating."})]})]})]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["\u26a0\ufe0f ",(0,t.jsxs)(s.strong,{children:["Avoid using ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"deletePreviousSchema(...,true)"})})," in production."]}),(0,t.jsx)(s.br,{}),"\n","It permanently deletes local data for that table."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-required-columns",children:"\ud83d\udce6 Required Columns"}),"\n",(0,t.jsxs)(s.p,{children:["You must define an ",(0,t.jsx)(s.code,{children:"id"})," column (",(0,t.jsx)(s.code,{children:"TEXT PRIMARY KEY"}),").",(0,t.jsx)(s.br,{}),"\n","Other system columns are auto-added if missing:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'{\n  created_at: "TEXT NOT NULL",\n  updated_at: "TEXT NOT NULL",\n  synced_at: "TEXT DEFAULT NULL",\n  deleted_at: "TEXT DEFAULT NULL",\n}\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-indexing-behavior",children:"\ud83d\udcc8 Indexing Behavior"}),"\n",(0,t.jsx)(s.h4,{id:"-auto-created-indexes-if-column-exists",children:"\u2705 Auto-created indexes (if column exists)"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"synced_at"})," \u2192 speeds up pending-push scans."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"deleted_at"})," \u2192 optimizes soft-delete lookups."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"updated_at"})," \u2192 used for incremental sync (changed-since queries)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"created_at"})," \u2192 used for sort or history lists."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"\ufe0f-custom-indexes",children:"\u2699\ufe0f Custom indexes"}),"\n",(0,t.jsx)(s.p,{children:"Specify them explicitly:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'__indices: ["email", "user_id"];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Which generates:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);\nCREATE INDEX IF NOT EXISTS idx_users_user_id ON users(user_id);\n"})}),"\n",(0,t.jsxs)(s.p,{children:["All ",(0,t.jsx)(s.code,{children:"__indices"})," must exist in the schema or ",(0,t.jsx)(s.code,{children:"defineLocalSchema(...)"})," throws."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-resetting-a-table",children:"\ud83e\uddfc Resetting a Table"}),"\n",(0,t.jsx)(s.p,{children:"To force a rebuild of a table and its local sync state:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'await defineLocalSchema("users", schema, true);\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-related",children:"\ud83d\udd17 Related"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.code,{children:"useSupastashData(...)"})," \u2014 auto-creates tables from Supabase metadata."]}),"\n",(0,t.jsxs)(s.li,{children:["\u274c Does ",(0,t.jsx)(s.em,{children:"not"})," apply constraints, defaults, or indexes."]}),"\n",(0,t.jsxs)(s.li,{children:["\u2699\ufe0f ",(0,t.jsx)(s.code,{children:"defineLocalSchema(...)"})," \u2014 use when structure and performance matter."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>r});var i=n(6540);const t={},d=i.createContext(t);function l(e){const s=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(d.Provider,{value:s},e.children)}}}]);